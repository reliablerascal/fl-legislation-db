heatmap_data$ballotpedia2 <- paste0("http://ballotpedia.org/",heatmap_data$ballotpedia)
heatmap_data$final[grepl("third",heatmap_data$desc,ignore.case=TRUE)] <- "Y"
# RR test1
print(head(leg_votes_with2))
library(future.apply)
library(future.apply)
library(future.apply)
library(pscl)       # Political Science Computational Laboratory package for analyzing roll call data and IRT models
library(tidyverse)  # A collection of R packages for data science
devtools::install_github("fanghuiz/legiscanrr")
library(tidyverse)  # A collection of R packages for data science
library(tidytext)   # Text mining using tidy data principles
library(legiscanrr) # Interface with the LegiScan API for accessing legislative data / devtools::install_github("fanghuiz/legiscanrr")
library(wnominate)  # W-NOMINATE package for scaling roll call data and estimating ideal points
library(oc)         # Optimal Classification package for scaling roll call data
library(pscl)       # Political Science Computational Laboratory package for analyzing roll call data and IRT models
library(wnominate)  # W-NOMINATE package for scaling roll call data and estimating ideal points
library(oc)         # Optimal Classification package for scaling roll call data
library(dwnominate) # Dynamic Weighted NOMINATE for analyzing changes in voting patterns over time / remotes::install_github('wmay/dwnominate')
library(jsonlite)   # Tools for parsing, generating, and manipulating JSON data
remotes::install_github('wmay/dwnominate')
remotes::install_github("wrathematics/basicspace")
if (!requireNamespace("remotes", quietly = TRUE)) install.packages("remotes")
remotes::install_github("wrathematics/basicspace")
install.packages("basicspace")
remotes::install_github("jamesdunham/basicspace")
install.packages("basicspace", repos = "http://R-Forge.R-project.org")
R.version.string
update.packages()
install.packages("basicspace", repos = "http://R-Forge.R-project.org")
tools::package_dependencies("dwnominate", recursive = TRUE)
install.packages("dwnominate")
pkgbuild::has_build_tools(debug = TRUE)
install.packages("dwnominate")
#install.packages("basicspace", repos = "http://R-Forge.R-project.org")
remotes::install_github('wmay/dwnominate')
install.packages("https://cran.r-project.org/src/contrib/Archive/basicspace/basicspace_0.2.5.tar.gz", repos = NULL, type = "source")
install.packages("https://cran.r-project.org/src/contrib/Archive/basicspace/basicspace_0.24.tar.gz", repos = NULL, type = "source")
remotes::install_github('wmay/dwnominate')
# libraries & options ####
library(tidyverse)  # A collection of R packages for data science
library(tidytext)   # Text mining using tidy data principles
library(legiscanrr) # Interface with the LegiScan API for accessing legislative data / devtools::install_github("fanghuiz/legiscanrr")
library(pscl)       # Political Science Computational Laboratory package for analyzing roll call data and IRT models
library(wnominate)  # W-NOMINATE package for scaling roll call data and estimating ideal points
library(oc)         # Optimal Classification package for scaling roll call data
library(dwnominate) # Dynamic Weighted NOMINATE for analyzing changes in voting patterns over time / remotes::install_github('wmay/dwnominate')
library(jsonlite)   # Tools for parsing, generating, and manipulating JSON data
library(SnowballC)  # Snowball stemmers for text preprocessing and stemming in natural language processing
library(future.apply)
options(scipen = 999) # Set options to display numeric values in precise format
legiscan_api_key(set_new=TRUE)
source("parse-functions.R")
source("scripts/parse-functions.R")
#set the working directory to the location of current script
script_dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
print(script_dir)
# Set the working directory to the script's directory
setwd(script_dir)
source("parse-functions.R")
# RR working only with manually downloaded 2024 session data for now
text_paths <- find_json_path(base_dir = "../data-raw/data_json/fl24-regular-json/..", file_type = "vote")
# RR working only with manually downloaded 2024 session data for now
text_paths <- find_json_path(base_dir = "../data-raw/fl24-regular-json/..", file_type = "vote")
text_paths_bills <- find_json_path(base_dir = "../data-raw/fl24-regular-json/..", file_type = "bill")
text_paths_leg <- find_json_path(base_dir = "data_json/fl24-regular-json/..",file_type = "people")
text_paths_leg <- find_json_path(base_dir = "../data-raw/fl24-regular-json/..",file_type = "people")
legislators <- parse_people_session(text_paths_leg) #we use session so we don't have the wrong roles
bills_all_sponsor <- parse_bill_sponsor(text_paths_bills)
primary_sponsors <- bills_all_sponsor %>% filter(sponsor_type_id == 1 & committee_sponsor == 0)
bills_all <- parse_bill_session(text_paths_bills) %>%
mutate(
session_year = as.numeric(str_extract(session_name, "\\d{4}")), # Extract year
two_year_period = case_when(
session_year < 2011 ~ "2010 or earlier",
session_year %% 2 == 0 ~ paste(session_year - 1, session_year, sep="-"),
TRUE ~ paste(session_year, session_year + 1, sep="-")
)
)
bill_detailed <- parse_bill_jsons(text_paths_bills)
# make big dfs ####
votes_all <- left_join(bill_detailed$votes,bill_detailed$bill_info_df) %>% mutate(pct = yea/total)
bill_vote_all <- inner_join(bills_all,votes_all,by=c("bill_id","number","title","session_id","session_name"
),suffix=c("","_vote")) %>% mutate(total_vote = (yea+nay),true_pct = yea/total_vote) %>% arrange(true_pct) #bill_id is unique and not duplicated across sessions
primary_sponsors_votes <- primary_sponsors %>% left_join(votes_all,by="bill_id") %>% mutate(total_vote = (yea+nay),true_pct = yea/total_vote) %>% arrange(true_pct)
bill_vote_all$session <- paste0(bill_vote_all$session_year,"-",gsub(" ","_", bill_vote_all$session_name))
leg_votes_with2 <- parse_person_vote_session(text_paths) %>%
mutate(roll_call_id = as.character(roll_call_id)) %>%  # Convert roll_call_id to character
inner_join(legislators,by=c("people_id","session")) %>%
inner_join(bill_vote_all %>% mutate(roll_call_id = as.character(roll_call_id)), by = c("roll_call_id", "session"))
leg_votes <- parse_person_vote_session(text_paths)
bill_vote_all$session <- paste0(bill_vote_all$session_year,"-",gsub(" ","_", bill_vote_all$session_name))
leg_votes_with2 <- parse_person_vote_session(text_paths) %>%
mutate(roll_call_id = as.character(roll_call_id)) %>%  # Convert roll_call_id to character
inner_join(legislators,by=c("people_id","session")) %>%
inner_join(bill_vote_all %>% mutate(roll_call_id = as.character(roll_call_id)), by = c("roll_call_id", "session"))
