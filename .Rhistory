cat(str(n), "records in", paste0(schema_name, ".", table_name), "\n")
n <- recordcount_table$num_rows
cat(n, "records in", paste0(schema_name, ".", table_name), "\n")
str(n)
cat(n, "records in", paste0(schema_name, ".", table_name), "\n")
cat(str(n), "records in", paste0(schema_name, ".", table_name), "\n")
n <- as.numeric(recordcount_table$num_rows)
cat(n, "records in", paste0(schema_name, ".", table_name), "\n")
test_table(con, schema_name, table_name)
test_table <- function(con, schema_name, table_name) {
# test by outputting recordcount and first five records
print("first five records")
dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5"))
sql_recordcount <- paste0("SELECT COUNT(*) as num_rows FROM ", schema_name, ".", table_name)
recordcount_table <- dbGetQuery(con, sql_recordcount)
n <- as.numeric(recordcount_table$num_rows)
cat(n, "records in", paste0(schema_name, ".", table_name), "\n")
}
test_table(con, schema_name, table_name)
list_tables <- c(
"d_partisan_votes",
"d_votes",
"priority_votes",
"r_partisan_votes",
"r_votes"
)
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
}
print("\n")
write_with_progress <- function(df, con, schema_name, table_name, chunk_size = 1000) {
n <- nrow(df)
pb <- progress_bar$new(
format = paste0("  writing ", table_name, " [:bar] :percent in :elapsed"),
total = n,
clear = FALSE,
width = 60
)
# Initialize the progress bar
pb$tick(0)
for (i in seq(1, n, by = chunk_size)) {
end <- min(i + chunk_size - 1, n)
chunk <- df[i:end, ]
dbWriteTable(con, SQL(paste0(schema_name, ".", table_name)),
as.data.frame(chunk), row.names = FALSE, append = TRUE)
pb$tick(end - i + 1)
}
print("\n")
cat("Data successfully written to", paste0(schema_name, ".", table_name), "\n")
}
test_table <- function(con, schema_name, table_name) {
# test by outputting recordcount and first five records
print("first five records")
dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5"))
sql_recordcount <- paste0("SELECT COUNT(*) as num_rows FROM ", schema_name, ".", table_name)
recordcount_table <- dbGetQuery(con, sql_recordcount)
n <- as.numeric(recordcount_table$num_rows)
cat(n, "records in", paste0(schema_name, ".", table_name), "\n")
}
########################################
#                                      #
# 2) connect to Postgres server        #
#                                      #
########################################
attempt_connection <- function() {
# Prompt for password
password_db <- readline(
prompt="Make sure ye've fired up the Postgres server and hooked up to the database.
Now, what be the secret code to yer treasure chest o' data?: ")
# Attempt to connect to Postgres database
con <- tryCatch(
dbConnect(RPostgres::Postgres(),
dbname = "fl_leg_votes",
host = "localhost",
port = 5432,
user = "postgres",
password = password_db),
error = function(e) {
message("Connection failed: ", e$message)
return(NULL)
}
)
return(con)
}
# Loop until successful connection
repeat {
con <- attempt_connection()
if (!is.null(con) && dbIsValid(con)) {
print("Successfully connected to the database!")
break
} else {
message("Failed to connect to the database. Please try again.")
}
}
dbExecute(con, paste0("CREATE SCHEMA IF NOT EXISTS ", schema_name))
list_tables <- c(
"d_partisan_votes",
"d_votes",
"priority_votes",
"r_partisan_votes",
"r_votes"
)
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
}
write_with_progress <- function(df, con, schema_name, table_name, chunk_size = 1000) {
n <- nrow(df)
pb <- progress_bar$new(
format = paste0("  writing ", table_name, " [:bar] :percent in :elapsed"),
total = n,
clear = FALSE,
width = 60
)
# Initialize the progress bar
pb$tick(0)
for (i in seq(1, n, by = chunk_size)) {
end <- min(i + chunk_size - 1, n)
chunk <- df[i:end, ]
dbWriteTable(con, SQL(paste0(schema_name, ".", table_name)),
as.data.frame(chunk), row.names = FALSE, append = TRUE)
pb$tick(end - i + 1)
}
cat("\n")
cat("Data successfully written to", paste0(schema_name, ".", table_name), "\n")
}
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
}
print(dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5")))
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
print(dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5")))
}
x = dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5"))
print (x)
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
x = dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5"))
print (x)
}
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5"))
}
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
print(dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5")))
}
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
print("first five records")
print(dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5")))
}
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
print("first five records")
print(dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5")))
}
write_with_progress <- function(df, con, schema_name, table_name, chunk_size = 1000) {
n <- nrow(df)
pb <- progress_bar$new(
format = paste0("  writing ", table_name, " [:bar] :percent in :elapsed"),
total = n,
clear = FALSE,
width = 60
)
# Initialize the progress bar
pb$tick(0)
for (i in seq(1, n, by = chunk_size)) {
end <- min(i + chunk_size - 1, n)
chunk <- df[i:end, ]
dbWriteTable(con, SQL(paste0(schema_name, ".", table_name)),
as.data.frame(chunk), row.names = FALSE, append = TRUE)
pb$tick(end - i + 1)
}
cat("---------------------\n")
cat("Data successfully written to", paste0(schema_name, ".", table_name), "\n")
}
test_table <- function(con, schema_name, table_name) {
#display first five records, but it's ignored here
print("first five records")
print(dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5")))
# display recordcount
sql_recordcount <- paste0("SELECT COUNT(*) as num_rows FROM ", schema_name, ".", table_name)
recordcount_table <- dbGetQuery(con, sql_recordcount)
n <- as.numeric(recordcount_table$num_rows)
cat(n, "records in", paste0(schema_name, ".", table_name), "\n")
}
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
#print("first five records")
#print(dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5")))
}
test_table <- function(con, schema_name, table_name) {
#display first five records, but it's ignored here
print("first five records")
table_first_five -> dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5")))
test_table <- function(con, schema_name, table_name) {
#display first five records, but it's ignored here
print("first five records")
table_first_five -> dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5"))
print(table_first_five)
# display recordcount
sql_recordcount <- paste0("SELECT COUNT(*) as num_rows FROM ", schema_name, ".", table_name)
recordcount_table <- dbGetQuery(con, sql_recordcount)
n <- as.numeric(recordcount_table$num_rows)
cat(n, "records in", paste0(schema_name, ".", table_name), "\n")
}
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
#print("first five records")
#print(dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5")))
}
test_table <- function(con, schema_name, table_name) {
#display first five records, but it's ignored here
print("first five records")
table_first_five -> dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5"))
print(table_first_five)
# display recordcount
sql_recordcount <- paste0("SELECT COUNT(*) as num_rows FROM ", schema_name, ".", table_name)
recordcount_table <- dbGetQuery(con, sql_recordcount)
n <- as.numeric(recordcount_table$num_rows)
cat(n, "records in", paste0(schema_name, ".", table_name), "\n")
}
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
#print("first five records")
#print(dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5")))
}
test_table <- function(con, schema_name, table_name) {
#display first five records, but it prints the same thing for every table
print("first five records")
print(dbGetQuery(con, paste0("SELECT * FROM ", schema_name, ".", table_name, " LIMIT 5")))
# display recordcount
sql_recordcount <- paste0("SELECT COUNT(*) as num_rows FROM ", schema_name, ".", table_name)
recordcount_table <- dbGetQuery(con, sql_recordcount)
n <- as.numeric(recordcount_table$num_rows)
cat(n, "records in", paste0(schema_name, ".", table_name), "\n")
}
for (table_name in list_tables) {
table_name = "d_partisan_votes"
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
}
for (table_name in list_tables) {
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
}
write_with_progress <- function(df, con, schema_name, table_name, chunk_size = 1000) {
n <- nrow(df)
pb <- progress_bar$new(
format = paste0("  writing ", table_name, " [:bar] :percent in :elapsed"),
total = n,
clear = FALSE,
width = 60
)
# Initialize the progress bar
pb$tick(0)
for (i in seq(1, n, by = chunk_size)) {
end <- min(i + chunk_size - 1, n)
chunk <- df[i:end, ]
dbWriteTable(con, SQL(paste0(schema_name, ".", table_name)),
as.data.frame(chunk), row.names = FALSE, append = TRUE)
pb$tick(end - i + 1)
}
cat("\n---------------------\n")
cat("Data successfully written to", paste0(schema_name, ".", table_name), "\n")
}
for (table_name in list_tables) {
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
}
write_with_progress <- function(df, con, schema_name, table_name, chunk_size = 1000) {
n <- nrow(df)
pb <- progress_bar$new(
format = paste0("  writing ", table_name, " [:bar] :percent in :elapsed"),
total = n,
clear = FALSE,
width = 60
)
# Initialize the progress bar
pb$tick(0)
for (i in seq(1, n, by = chunk_size)) {
end <- min(i + chunk_size - 1, n)
chunk <- df[i:end, ]
dbWriteTable(con, SQL(paste0(schema_name, ".", table_name)),
as.data.frame(chunk), row.names = FALSE, append = TRUE)
pb$tick(end - i + 1)
}
cat("\n",toupper(table_name),"---------------------\n")
cat("Data successfully written to", paste0(schema_name, ".", table_name), "\n")
}
for (table_name in list_tables) {
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
}
write_with_progress <- function(df, con, schema_name, table_name, chunk_size = 1000) {
n <- nrow(df)
pb <- progress_bar$new(
format = paste0("  writing ", table_name, " [:bar] :percent in :elapsed"),
total = n,
clear = FALSE,
width = 60
)
# Initialize the progress bar
pb$tick(0)
for (i in seq(1, n, by = chunk_size)) {
end <- min(i + chunk_size - 1, n)
chunk <- df[i:end, ]
dbWriteTable(con, SQL(paste0(schema_name, ".", table_name)),
as.data.frame(chunk), row.names = FALSE, append = TRUE)
pb$tick(end - i + 1)
}
cat("\n","---------------------\n",toupper(table_name),"\n",---------------------\n")
cat("\n","---------------------\n",toupper(table_name),"\n",---------------------\n")
write_with_progress <- function(df, con, schema_name, table_name, chunk_size = 1000) {
n <- nrow(df)
pb <- progress_bar$new(
format = paste0("  writing ", table_name, " [:bar] :percent in :elapsed"),
total = n,
clear = FALSE,
width = 60
)
# Initialize the progress bar
pb$tick(0)
for (i in seq(1, n, by = chunk_size)) {
end <- min(i + chunk_size - 1, n)
chunk <- df[i:end, ]
dbWriteTable(con, SQL(paste0(schema_name, ".", table_name)),
as.data.frame(chunk), row.names = FALSE, append = TRUE)
pb$tick(end - i + 1)
}
cat("\n","---------------------\n",toupper(table_name),"\n","---------------------\n")
cat("Data successfully written to", paste0(schema_name, ".", table_name), "\n")
}
for (table_name in list_tables) {
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
}
list_tables <- c(
"d_partisan_votes",
"d_votes",
"priority_votes",
"r_partisan_votes",
"r_votes",
#  "heatmap_data"
)
list_tables <- c(
"d_partisan_votes",
"d_votes",
"priority_votes",
"r_partisan_votes",
"r_votes"
#  ,"heatmap_data"
)
list_tables <- c(
"d_partisan_votes",
"d_votes",
"priority_votes",
"r_partisan_votes",
"r_votes",
"heatmap_data"
)
for (table_name in list_tables) {
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
}
write_with_progress <- function(df, con, schema_name, table_name, chunk_size = 1000) {
n <- nrow(df)
pb <- progress_bar$new(
format = paste0("  writing ", table_name, " [:bar] :percent in :elapsed"),
total = n,
clear = FALSE,
width = 60
)
# Initialize the progress bar
pb$tick(0)
for (i in seq(1, n, by = chunk_size)) {
end <- min(i + chunk_size - 1, n)
chunk <- df[i:end, ]
dbWriteTable(con, SQL(paste0(schema_name, ".", table_name)),
as.data.frame(chunk), row.names = FALSE, append = TRUE)
pb$tick(end - i + 1)
}
cat("Data successfully written to", paste0(schema_name, ".", table_name), "\n")
}
list_tables <- c(
"d_partisan_votes",
"d_votes",
"priority_votes",
"r_partisan_votes",
"r_votes",
"heatmap_data"
)
for (table_name in list_tables) {
cat("\n","---------------------\n",toupper(table_name),"\n","---------------------\n")
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
}
list_tables <- c(
"heatmap_data"
)
#tables currently in testing
list_tables <- c(
"heatmap_data"
)
for (table_name in list_tables) {
cat("\n","---------------------\n",toupper(table_name),"\n","---------------------\n")
df <- get(table_name)
write_with_progress(df, con, schema_name, table_name)
test_table(con, schema_name, table_name)
}
view(head(heatmap_data))
view("d_votes")
View(head("heatmap_data"))
View(head("d_votes"))
View("d_votes")
View(d_votes)
View(head(heatmap_data))
# to install an individual package:
install.packages("dplyr")
#handle heatmap_data separately b/c it's problematic
table_name = "heatmap_data"
exclude_cols <- c("roll_call_id", "progress")
cat("\n","---------------------\n",toupper(table_name),"\n","---------------------\n")
df <- get(table_name)
df %>% select(-one_of(exclude_cols))
library(dplyr) # allows excluding specific columns by name from sql commands (e.g. to debug heatmap_data)
df %>% select(-one_of(exclude_cols))
write_with_progress(df, con, schema_name, table_name)
df <- df %>% select(-one_of(exclude_cols))
write_with_progress(df, con, schema_name, table_name)
exclude_cols <- c("roll_call_id", "progress", "history")
cat("\n","---------------------\n",toupper(table_name),"\n","---------------------\n")
df <- get(table_name)
df <- df %>% select(-one_of(exclude_cols))
write_with_progress(df, con, schema_name, table_name)
exclude_cols <- c("roll_call_id", "progress", "history", "sponsors")
cat("\n","---------------------\n",toupper(table_name),"\n","---------------------\n")
df <- get(table_name)
df <- df %>% select(-one_of(exclude_cols))
write_with_progress(df, con, schema_name, table_name)
exclude_cols <- c("roll_call_id", "progress", "history", "sponsors", "sasts")
cat("\n","---------------------\n",toupper(table_name),"\n","---------------------\n")
df <- get(table_name)
df <- df %>% select(-one_of(exclude_cols))
write_with_progress(df, con, schema_name, table_name)
exclude_cols <- c("roll_call_id", "progress", "history", "sponsors", "sasts", "texts")
cat("\n","---------------------\n",toupper(table_name),"\n","---------------------\n")
df <- get(table_name)
df <- df %>% select(-one_of(exclude_cols))
write_with_progress(df, con, schema_name, table_name)
source("C:/Users/relia/jour/my_database_projects/fl-legislation-db/scripts/etl_main.R")
library(tidyverse)  # A collection of R packages for data science
runApp()
source("C:/Users/relia/jour/my_database_projects/fl-legislation-db/scripts/etl_main.R")
rename ("04_write-postgres.R", "04_write_postgres.R")
file.rename ("04_write-postgres.R", "04_write_postgres.R")
file.rename ("03_prep_legiscan.R", "03_transform.R")
file.rename ("04_write_postgres.R", "04_load_postgres.R")
file.rename ("04_load_postgres.R", "05_load_app_layer.R")
file.rename ("03_transform.R", "04_transform.R")
file.copy ("05_load_app_layer.R","03_load_views.R")
source("C:/Users/relia/jour/my_database_projects/fl-legislation-db/scripts/functions_database.R")
source("C:/Users/relia/jour/my_database_projects/fl-legislation-db/scripts/03_load_views.R")
source("C:/Users/relia/jour/my_database_projects/fl-legislation-db/scripts/03_load_views.R")
source("C:/Users/relia/jour/my_database_projects/fl-legislation-db/scripts/03_load_views.R")
source("C:/Users/relia/jour/my_database_projects/fl-legislation-db/scripts/03_load_views.R")
source("C:/Users/relia/jour/my_database_projects/fl-legislation-db/scripts/03_load_views.R")
