D == 0.5 ~ "Equal",
TRUE ~ dem_majority
),
gop_majority = case_when(
R > 0.5 ~ "Y",
R < 0.5 ~ "N",
R == 0.5 ~ "Equal",
TRUE ~ gop_majority
)
)
calc_votes_partisanship$priority_bills[abs(calc_votes_partisanship$DminusR)>.85] <- "Y"
calc_votes_partisanship <- calc_votes_partisanship %>%
mutate(vote_with_dem_majority = ifelse(dem_majority == "Y" & vote_text=="Yea", 1, 0),
vote_with_gop_majority = ifelse(gop_majority == "Y" & vote_text=="Yea", 1, 0),
vote_with_neither = ifelse((dem_majority == "Y" & gop_majority == "Y" & vote_text=="Nay") |
(dem_majority=="N" & gop_majority == "N" & vote_text=="Yea"),1,0),
vote_with_dem_majority = ifelse((dem_majority == "Y" & vote_text == "Yea")|dem_majority=="N" & vote_text=="Nay", 1, 0),
vote_with_gop_majority = ifelse((gop_majority == "Y" & vote_text == "Yea")|gop_majority=="N" & vote_text=="Nay", 1, 0),
vote_with_neither = ifelse(
(dem_majority == "Y" & gop_majority == "Y" & vote_text == "Nay") | (dem_majority == "N" & gop_majority == "N" & vote_text == "Yea"), 1, 0),
voted_at_all = vote_with_dem_majority+vote_with_gop_majority+vote_with_neither,
maverick_votes=ifelse((party=="D" & vote_text=="Yea" & dem_majority=="N" & gop_majority=="Y") |
(party=="D" & vote_text=="Nay" & dem_majority=="Y" & gop_majority=="N") |
(party=="R" & vote_text=="Yea" & gop_majority=="N" & dem_majority=="Y") |
(party=="R" & vote_text=="Nay" & gop_majority=="Y" & dem_majority=="N"),1,0 ))
calc_votes_partisanship <- calc_votes_partisanship %>%
mutate(
bill_alignment = case_when(
D == 0.5 | R == 0.5 ~ "at least one party even",
D > 0.5 & R < 0.5 ~ "DEM",
D < 0.5 & R > 0.5 ~ "GOP",
D < 0.5 & R < 0.5 ~ "Both",
D > 0.5 & R > 0.5 ~ "Both",
TRUE ~ bill_alignment
)
)
calc_party_majority_votes <- calc_votes_partisanship %>% filter(party!=""& !is.na(party)) %>%
group_by(roll_call_id, party) %>%
summarize(majority_vote = if_else(sum(vote_text == "Yea") > sum(vote_text == "Nay"), "Yea", "Nay"), .groups = 'drop') %>%
pivot_wider(names_from = party,values_from = majority_vote,id_cols = roll_call_id,values_fill = "NA",names_prefix = "vote_")
# workaround 6/27/24 replaced session_name with session, twice in the first filter below
view_partisanship <- calc_votes_partisanship %>%
left_join(calc_party_majority_votes, by = c("roll_call_id")) %>%
filter(!is.na(party)&party!="" & !grepl("2010",session,ignore.case=TRUE)& !is.na(session)) %>%
filter(vote_text=="Yea"|vote_text=="Nay") %>%
mutate(diff_party_vote_d = if_else(vote_text != vote_D, 1, 0),diff_party_vote_r = if_else(vote_text != vote_R, 1, 0),
diff_both_parties = if_else(diff_party_vote_d == 1 & diff_party_vote_r == 1,1,0),
diff_d_not_r=if_else(diff_party_vote_d==1 & diff_party_vote_r==0,1,0),
diff_r_not_d=if_else(diff_party_vote_d==0&diff_party_vote_r==1,1,0),
partisan_metric = ifelse(party=="R",diff_r_not_d,ifelse(party=="D",diff_d_not_r,NA)),
pct_format = scales::percent(pct_of_total)) %>% arrange(desc(partisan_metric)) %>% distinct()
# re-order data for better visualization
view_partisanship$roll_call_id = with(view_partisanship, reorder(roll_call_id, partisan_metric, sum))
view_partisanship$name = with(view_partisanship, reorder(name, partisan_metric, sum))
# creates an overall partisanship metric for each legislator, filters for dates >= 11/10/12?
# this is used later to sort the dataframe
calc_legislator_mean_partisanship <- view_partisanship %>% group_by(name) %>% filter(date >= as.Date("11/10/2012")) %>% summarize(partisan_metric=mean(partisan_metric)) %>% arrange(partisan_metric,name) #create the sort based on partisan metric
###########################################
#                                         #
# 3) STOPGAP HARDCODING                   #
#                                         #
###########################################
view_partisanship$number = view_partisanship$number.x
view_partisanship$title = view_partisanship$title.x
view_partisanship <- view_partisanship %>%
select(-title.x,-title.y,-number.x,-number.y)
###########################################
#                                         #
# 3) build app layer                      #
#                                         #
###########################################
app_data <- view_partisanship
#was partisan_metric2
app_data$partisan_metric <- ifelse(app_data$vote_with_neither == 1, 1,
ifelse(app_data$maverick_votes == 1, 2, 0))
#was partisan_metric3
app_data$partisan_metric_desc <- factor(app_data$partisan_metric,
levels = c(0, 1, 2),
labels = c("With Party", "Independent Vote", "Maverick Vote"))
calc_d_partisan_votes <- app_data %>% filter(party=="D") %>% group_by(roll_call_id) %>% summarize(max=max(partisan_metric)) %>% filter(max>=1)
calc_r_partisan_votes <- app_data %>% filter(party=="R") %>% group_by(roll_call_id) %>% summarize(max=max(partisan_metric)) %>% filter(max>=1)
calc_d_votes <- app_data %>% filter(party=="D") %>% group_by(roll_call_id,vote_text) %>% summarize(n=n()) %>%  pivot_wider(names_from=vote_text,values_from=n,values_fill = 0) %>% mutate(y_pct = Yea/(Yea+Nay),n_pct = Nay/(Nay+Yea)) %>% filter(y_pct != 0 & y_pct != 1) %>% filter(as.character(roll_call_id) %in% as.character(calc_d_partisan_votes$roll_call_id))
calc_r_votes <- app_data %>% filter(party=="R") %>% group_by(roll_call_id,vote_text) %>% summarize(n=n()) %>%  pivot_wider(names_from=vote_text,values_from=n,values_fill = 0) %>% mutate(y_pct = Yea/(Yea+Nay),n_pct = Nay/(Nay+Yea)) %>% filter(y_pct != 0 & y_pct != 1) %>% filter(as.character(roll_call_id) %in% as.character(calc_r_partisan_votes$roll_call_id))
calc_roll_call_to_number <- app_data %>%
select(roll_call_id, year=session_year,number) %>%
distinct() %>%
arrange(desc(year),number,roll_call_id)
calc_roll_call_to_number$number_year <- paste(calc_roll_call_to_number$number,"-",calc_roll_call_to_number$year)
app_data$roll_call_id <- factor(app_data$roll_call_id, levels = calc_roll_call_to_number$roll_call_id)
app_data$name <- factor(app_data$name, levels = calc_legislator_mean_partisanship$name)
y_labels <- setNames(calc_roll_call_to_number$number_year, calc_roll_call_to_number$roll_call_id)
app_data$final <- "N"
app_data$final[grepl("third",app_data$desc,ignore.case=TRUE)] <- "Y"
app_data$ballotpedia2 <- paste0("http://ballotpedia.org/",app_data$ballotpedia)
### create the text to be displayed in the javascript interactive when hovering over votes ####
createHoverText <- function(numbers, descriptions, urls, pcts, vote_texts,descs,title,date, names, width = 100) {
# Wrap the description text at the specified width
wrapped_descriptions <- sapply(descriptions, function(desc) paste(strwrap(desc, width = width), collapse = "<br>"))
# Combine the elements into a single string
paste(
names, " voted ", vote_texts, " on ", descs, " for bill ",numbers," - ",title," on ",date,"<br>",
"Description: ", wrapped_descriptions, "<br>",
"URL: ", urls, "<br>",
pcts, " voted for this bill",
sep = ""
)
}
app_data$hover_text <- mapply(
createHoverText,
numbers = app_data$number,
descs = app_data$desc,
title=app_data$title,date=app_data$date,
descriptions = app_data$description,
urls = app_data$url,
pcts = app_data$pct_format,
vote_texts = app_data$vote_text,
names = app_data$name,
SIMPLIFY = FALSE  # Keep it as a list
)
#this view will be saved in app_shiny.vote_patterns, for use by the Shiny app Voting Patterns
app_vote_patterns <- app_data %>%
# Step 1: Calculate max partisan_metric2 for Democratic votes
group_by(roll_call_id) %>%
mutate(max_partisan_metric2 = if_else(party == "D", max(partisan_metric2, na.rm = TRUE), NA_real_)) %>%
ungroup() %>%
# Step 2: Mark roll_call_ids that meet the criteria for d_partisan_votes
mutate(in_d_partisan_votes = !is.na(max_partisan_metric2) & max_partisan_metric2 >= 1) %>%
# Step 3: Calculate y_pct and n_pct for Democratic votes
group_by(roll_call_id, vote_text) %>%
summarize(n = n(), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = vote_text, values_from = n, values_fill = 0) %>%
mutate(
y_pct = Yea / (Yea + Nay),
n_pct = Nay / (Nay + Yea)
) %>%
ungroup() %>%
# Step 4: Filter based on y_pct and n_pct, and add d_vote column
mutate(
d_vote = if_else(
party == "D" & in_d_partisan_votes & y_pct != 0 & y_pct != 1,
1, 0
)
)
#this view will be saved in app_shiny.vote_patterns, for use by the Shiny app Voting Patterns
app_vote_patterns <- app_data %>%
# Step 1: Calculate max partisan_metric2 for Democratic votes
group_by(roll_call_id) %>%
mutate(max_partisan_metric2 = if_else(party == "D", max(partisan_metric, na.rm = TRUE), NA_real_)) %>%
ungroup() %>%
# Step 2: Mark roll_call_ids that meet the criteria for d_partisan_votes
mutate(in_d_partisan_votes = !is.na(max_partisan_metric2) & max_partisan_metric >= 1) %>%
# Step 3: Calculate y_pct and n_pct for Democratic votes
group_by(roll_call_id, vote_text) %>%
summarize(n = n(), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = vote_text, values_from = n, values_fill = 0) %>%
mutate(
y_pct = Yea / (Yea + Nay),
n_pct = Nay / (Nay + Yea)
) %>%
ungroup() %>%
# Step 4: Filter based on y_pct and n_pct, and add d_vote column
mutate(
d_vote = if_else(
party == "D" & in_d_partisan_votes & y_pct != 0 & y_pct != 1,
1, 0
)
)
#this view will be saved in app_shiny.vote_patterns, for use by the Shiny app Voting Patterns
app_vote_patterns <- app_data %>%
# Step 1: Calculate max partisan_metric2 for Democratic votes
group_by(roll_call_id) %>%
mutate(max_partisan_metric2 = if_else(party == "D", max(partisan_metric, na.rm = TRUE), NA_real_)) %>%
ungroup() %>%
# Step 2: Mark roll_call_ids that meet the criteria for d_partisan_votes
mutate(in_d_partisan_votes = !is.na(max_partisan_metric) & max_partisan_metric >= 1) %>%
# Step 3: Calculate y_pct and n_pct for Democratic votes
group_by(roll_call_id, vote_text) %>%
summarize(n = n(), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = vote_text, values_from = n, values_fill = 0) %>%
mutate(
y_pct = Yea / (Yea + Nay),
n_pct = Nay / (Nay + Yea)
) %>%
ungroup() %>%
# Step 4: Filter based on y_pct and n_pct, and add d_vote column
mutate(
d_vote = if_else(
party == "D" & in_d_partisan_votes & y_pct != 0 & y_pct != 1,
1, 0
)
)
#this view will be saved in app_shiny.vote_patterns, for use by the Shiny app Voting Patterns
app_vote_patterns <- app_data %>%
# Step 1: Calculate max partisan_metric2 for Democratic votes
group_by(roll_call_id) %>%
mutate(max_partisan_metric = if_else(party == "D", max(partisan_metric, na.rm = TRUE), NA_real_)) %>%
ungroup() %>%
# Step 2: Mark roll_call_ids that meet the criteria for d_partisan_votes
mutate(in_d_partisan_votes = !is.na(max_partisan_metric) & max_partisan_metric >= 1) %>%
# Step 3: Calculate y_pct and n_pct for Democratic votes
group_by(roll_call_id, vote_text) %>%
summarize(n = n(), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = vote_text, values_from = n, values_fill = 0) %>%
mutate(
y_pct = Yea / (Yea + Nay),
n_pct = Nay / (Nay + Yea)
) %>%
ungroup() %>%
# Step 4: Filter based on y_pct and n_pct, and add d_vote column
mutate(
d_vote = if_else(
party == "D" & in_d_partisan_votes & y_pct != 0 & y_pct != 1,
1, 0
)
)
#app_data$hover_text <- sapply(app_data$hover_text, paste, collapse = " ")  # Collapse the list into a single string
#stopgap
app_data$hover_text <- "DEBUG"
app_vote_patterns <- app_data
#pre-filter this here instead of in app
app_vote_patterns <- app_vote_patterns %>%
filter(pct_of_present != 0 & pct_of_present != 1)
app_vote_patterns <- app_vote_patterns[,c("roll_call_id","partisan_metric2","hover_text","year","role","final","party","name")]
app_vote_patterns <- app_vote_patterns[,c("roll_call_id","partisan_metric","hover_text","year","role","final","party","name")]
########################################
#                                      #
# 1B) create views version 2           #
#                                      #
########################################
# SEE 6/27 5:58am backup for version 1 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
# including title and number of bills for legibility and debugging, but could possibly remove them
# 6/27/24 RR added suffix
#view_roll_calls_w_calc <- roll_calls %>%
#  left_join(bills %>% select(bill_id, title, number, session_year), by = "bill_id", suffix=c("","_vote"))
view_roll_calls_w_calc <- t_roll_calls %>%
left_join(t_bills %>% select(bill_id, title, number, session_year, description, url), by = "bill_id")
view_roll_calls_w_calc <- view_roll_calls_w_calc %>% mutate(
pct_of_total = yea/total,
n_present = yea+nay,
pct_of_present = yea/n_present
)
view_roll_calls_w_calc <- view_roll_calls_w_calc %>% arrange(pct_of_present)
#convert roll call id to character (not sure why)
t_legislator_votes <- t_legislator_votes %>% mutate(roll_call_id = as.character(roll_call_id))
view_roll_calls_w_calc <- view_roll_calls_w_calc %>% mutate(roll_call_id = as.character(roll_call_id))
calc_legislator_votes <- t_legislator_votes %>%
inner_join(t_legislator_sessions %>% select(people_id, session, party, name, ballotpedia, role), by = c("people_id", "session"))
calc_legislator_votes <- calc_legislator_votes %>%
inner_join(view_roll_calls_w_calc, by = c("roll_call_id", "session"))
calc_analyze_bill <- calc_legislator_votes %>% group_by(party,roll_call_id,title,vote_text,number) %>% summarize(n=n()) %>% arrange(desc(n)) %>% pivot_wider(values_from = n,names_from = vote_text,values_fill = 0) %>% mutate(total=sum(Yea,NV,Absent,Nay,na.rm = TRUE),total2=sum(Yea,Nay)) %>% filter(total>0 & total2 >0) %>% mutate(y_pct = Yea/total,n_pct=Nay/total,nv_pct=NV/total, absent_pct=Absent/total,NV_A=(NV+Absent)/total,y_pct2 = Yea/(Yea+Nay),n_pct2 = Nay/(Yea+Nay),margin=y_pct2-n_pct2)
# create partisanship variables
calc_partisanbillvotes <- calc_analyze_bill %>%   select(party,roll_call_id,title,y_pct2,number) %>%
pivot_wider(names_from = party,values_from=y_pct2,values_fill = NA,id_cols = c(roll_call_id,title,number)) %>%
mutate(
DminusR = D - R,
Partisan = NA_character_,
GOP = NA_character_,
DEM = NA_character_
)
calc_partisanbillvotes <- calc_partisanbillvotes %>%
mutate(
Partisan = case_when(
is.na(DminusR) ~ "Unclear",
DminusR < -0.75 ~ "Very GOP",
DminusR < -0.25 ~ "GOP",
DminusR < 0 ~ "Somewhat GOP",
DminusR == 0 ~ "Split",
DminusR > 0.75 ~ "Very DEM",
DminusR > 0.25 ~ "DEM",
DminusR > 0 ~ "Somewhat DEM",
TRUE ~ Partisan
),
GOP = case_when(
R == 1 ~ "GOP Unanimously Support",
R > 0.9 ~ "GOP Very Strongly Support",
R > 0.75 ~ "GOP Moderately Support",
R > 0.5 ~ "GOP Support",
R == 0.5 ~ "GOP Split",
R < 0.1 ~ "GOP Very Strongly Oppose",
R < 0.25 ~ "GOP Moderately Oppose",
R < 0.5 ~ "GOP Oppose",
R == 0 ~ "GOP Unanimously Oppose",
TRUE ~ GOP
),
DEM = case_when(
D == 1 ~ "DEM Unanimously Support",
D > 0.9 ~ "DEM Very Strongly Support",
D > 0.75 ~ "DEM Strongly Support",
D > 0.5 ~ "DEM Support",
D == 0.5 ~ "DEM Split",
D < 0.1 ~ "DEM Very Strongly Oppose",
D < 0.25 ~ "DEM Moderately Oppose",
D < 0.5 ~ "DEM Oppose",
D == 0 ~ "DEM Unanimously Oppose",
is.na(D) ~ "DEM No Votes",
TRUE ~ DEM
)
)
###########################################
#                                         #
# 2b) partisanship analysis               #
#                                         #
###########################################
# join detailed legislative votes with partisanship analysis, removing nulls, initialize and set defaults for calculated fields
calc_votes_partisanship <- calc_legislator_votes %>%
filter(!is.na(date)&total>0)
# %>% # select(roll_call_id, R, D, DminusR, Partisan, GOP, DEM),
calc_votes_partisanship <- calc_votes_partisanship %>%
left_join(
calc_partisanbillvotes,
by = 'roll_call_id'
) %>%
filter(!is.na(D) & !is.na(R) & !is.na(DminusR))
calc_votes_partisanship <- calc_votes_partisanship %>% arrange(desc(abs(DminusR)))
calc_votes_partisanship <- calc_votes_partisanship %>%
mutate(
dem_majority = NA_character_,
gop_majority = NA_character_,
bill_alignment = NA_character_,
priority_bills = "N"
)
calc_votes_partisanship <- calc_votes_partisanship %>%
mutate(
dem_majority = case_when(
D > 0.5 ~ "Y",
D < 0.5 ~ "N",
D == 0.5 ~ "Equal",
TRUE ~ dem_majority
),
gop_majority = case_when(
R > 0.5 ~ "Y",
R < 0.5 ~ "N",
R == 0.5 ~ "Equal",
TRUE ~ gop_majority
)
)
calc_votes_partisanship$priority_bills[abs(calc_votes_partisanship$DminusR)>.85] <- "Y"
calc_votes_partisanship <- calc_votes_partisanship %>%
mutate(vote_with_dem_majority = ifelse(dem_majority == "Y" & vote_text=="Yea", 1, 0),
vote_with_gop_majority = ifelse(gop_majority == "Y" & vote_text=="Yea", 1, 0),
vote_with_neither = ifelse((dem_majority == "Y" & gop_majority == "Y" & vote_text=="Nay") |
(dem_majority=="N" & gop_majority == "N" & vote_text=="Yea"),1,0),
vote_with_dem_majority = ifelse((dem_majority == "Y" & vote_text == "Yea")|dem_majority=="N" & vote_text=="Nay", 1, 0),
vote_with_gop_majority = ifelse((gop_majority == "Y" & vote_text == "Yea")|gop_majority=="N" & vote_text=="Nay", 1, 0),
vote_with_neither = ifelse(
(dem_majority == "Y" & gop_majority == "Y" & vote_text == "Nay") | (dem_majority == "N" & gop_majority == "N" & vote_text == "Yea"), 1, 0),
voted_at_all = vote_with_dem_majority+vote_with_gop_majority+vote_with_neither,
maverick_votes=ifelse((party=="D" & vote_text=="Yea" & dem_majority=="N" & gop_majority=="Y") |
(party=="D" & vote_text=="Nay" & dem_majority=="Y" & gop_majority=="N") |
(party=="R" & vote_text=="Yea" & gop_majority=="N" & dem_majority=="Y") |
(party=="R" & vote_text=="Nay" & gop_majority=="Y" & dem_majority=="N"),1,0 ))
calc_votes_partisanship <- calc_votes_partisanship %>%
mutate(
bill_alignment = case_when(
D == 0.5 | R == 0.5 ~ "at least one party even",
D > 0.5 & R < 0.5 ~ "DEM",
D < 0.5 & R > 0.5 ~ "GOP",
D < 0.5 & R < 0.5 ~ "Both",
D > 0.5 & R > 0.5 ~ "Both",
TRUE ~ bill_alignment
)
)
calc_party_majority_votes <- calc_votes_partisanship %>% filter(party!=""& !is.na(party)) %>%
group_by(roll_call_id, party) %>%
summarize(majority_vote = if_else(sum(vote_text == "Yea") > sum(vote_text == "Nay"), "Yea", "Nay"), .groups = 'drop') %>%
pivot_wider(names_from = party,values_from = majority_vote,id_cols = roll_call_id,values_fill = "NA",names_prefix = "vote_")
# workaround 6/27/24 replaced session_name with session, twice in the first filter below
view_partisanship <- calc_votes_partisanship %>%
left_join(calc_party_majority_votes, by = c("roll_call_id")) %>%
filter(!is.na(party)&party!="" & !grepl("2010",session,ignore.case=TRUE)& !is.na(session)) %>%
filter(vote_text=="Yea"|vote_text=="Nay") %>%
mutate(diff_party_vote_d = if_else(vote_text != vote_D, 1, 0),diff_party_vote_r = if_else(vote_text != vote_R, 1, 0),
diff_both_parties = if_else(diff_party_vote_d == 1 & diff_party_vote_r == 1,1,0),
diff_d_not_r=if_else(diff_party_vote_d==1 & diff_party_vote_r==0,1,0),
diff_r_not_d=if_else(diff_party_vote_d==0&diff_party_vote_r==1,1,0),
partisan_metric = ifelse(party=="R",diff_r_not_d,ifelse(party=="D",diff_d_not_r,NA)),
pct_format = scales::percent(pct_of_total)) %>% arrange(desc(partisan_metric)) %>% distinct()
# re-order data for better visualization
view_partisanship$roll_call_id = with(view_partisanship, reorder(roll_call_id, partisan_metric, sum))
view_partisanship$name = with(view_partisanship, reorder(name, partisan_metric, sum))
# creates an overall partisanship metric for each legislator, filters for dates >= 11/10/12?
# this is used later to sort the dataframe
calc_legislator_mean_partisanship <- view_partisanship %>% group_by(name) %>% filter(date >= as.Date("11/10/2012")) %>% summarize(partisan_metric=mean(partisan_metric)) %>% arrange(partisan_metric,name) #create the sort based on partisan metric
###########################################
#                                         #
# 3) STOPGAP HARDCODING                   #
#                                         #
###########################################
view_partisanship$number = view_partisanship$number.x
view_partisanship$title = view_partisanship$title.x
view_partisanship <- view_partisanship %>%
select(-title.x,-title.y,-number.x,-number.y)
###########################################
#                                         #
# 3) build app layer                      #
#                                         #
###########################################
app_data <- view_partisanship
#was partisan_metric2
app_data$partisan_metric <- ifelse(app_data$vote_with_neither == 1, 1,
ifelse(app_data$maverick_votes == 1, 2, 0))
#was partisan_metric3
app_data$partisan_metric_desc <- factor(app_data$partisan_metric,
levels = c(0, 1, 2),
labels = c("With Party", "Independent Vote", "Maverick Vote"))
calc_d_partisan_votes <- app_data %>% filter(party=="D") %>% group_by(roll_call_id) %>% summarize(max=max(partisan_metric)) %>% filter(max>=1)
calc_r_partisan_votes <- app_data %>% filter(party=="R") %>% group_by(roll_call_id) %>% summarize(max=max(partisan_metric)) %>% filter(max>=1)
calc_d_votes <- app_data %>% filter(party=="D") %>% group_by(roll_call_id,vote_text) %>% summarize(n=n()) %>%  pivot_wider(names_from=vote_text,values_from=n,values_fill = 0) %>% mutate(y_pct = Yea/(Yea+Nay),n_pct = Nay/(Nay+Yea)) %>% filter(y_pct != 0 & y_pct != 1) %>% filter(as.character(roll_call_id) %in% as.character(calc_d_partisan_votes$roll_call_id))
calc_r_votes <- app_data %>% filter(party=="R") %>% group_by(roll_call_id,vote_text) %>% summarize(n=n()) %>%  pivot_wider(names_from=vote_text,values_from=n,values_fill = 0) %>% mutate(y_pct = Yea/(Yea+Nay),n_pct = Nay/(Nay+Yea)) %>% filter(y_pct != 0 & y_pct != 1) %>% filter(as.character(roll_call_id) %in% as.character(calc_r_partisan_votes$roll_call_id))
calc_roll_call_to_number <- app_data %>%
select(roll_call_id, year=session_year,number) %>%
distinct() %>%
arrange(desc(year),number,roll_call_id)
calc_roll_call_to_number$number_year <- paste(calc_roll_call_to_number$number,"-",calc_roll_call_to_number$year)
app_data$roll_call_id <- factor(app_data$roll_call_id, levels = calc_roll_call_to_number$roll_call_id)
app_data$name <- factor(app_data$name, levels = calc_legislator_mean_partisanship$name)
y_labels <- setNames(calc_roll_call_to_number$number_year, calc_roll_call_to_number$roll_call_id)
app_data$final <- "N"
app_data$final[grepl("third",app_data$desc,ignore.case=TRUE)] <- "Y"
app_data$ballotpedia2 <- paste0("http://ballotpedia.org/",app_data$ballotpedia)
### create the text to be displayed in the javascript interactive when hovering over votes ####
createHoverText <- function(numbers, descriptions, urls, pcts, vote_texts,descs,title,date, names, width = 100) {
# Wrap the description text at the specified width
wrapped_descriptions <- sapply(descriptions, function(desc) paste(strwrap(desc, width = width), collapse = "<br>"))
# Combine the elements into a single string
paste(
names, " voted ", vote_texts, " on ", descs, " for bill ",numbers," - ",title," on ",date,"<br>",
"Description: ", wrapped_descriptions, "<br>",
"URL: ", urls, "<br>",
pcts, " voted for this bill",
sep = ""
)
}
app_data$hover_text <- mapply(
createHoverText,
numbers = app_data$number,
descs = app_data$desc,
title=app_data$title,date=app_data$date,
descriptions = app_data$description,
urls = app_data$url,
pcts = app_data$pct_format,
vote_texts = app_data$vote_text,
names = app_data$name,
SIMPLIFY = FALSE  # Keep it as a list
)
#stopgap
app_data$hover_text <- "DEBUG"
app_vote_patterns <- app_data
#this view will be saved in app_shiny.vote_patterns, for use by the Shiny app Voting Patterns
app_vote_patterns <- app_data %>%
# Step 1: Calculate max partisan_metric2 for Democratic votes
group_by(roll_call_id) %>%
mutate(max_partisan_metric = if_else(party == "D", max(partisan_metric, na.rm = TRUE), NA_real_)) %>%
ungroup() %>%
# Step 2: Mark roll_call_ids that meet the criteria for d_partisan_votes
mutate(in_d_partisan_votes = !is.na(max_partisan_metric) & max_partisan_metric >= 1) %>%
# Step 3: Calculate y_pct and n_pct for Democratic votes
group_by(roll_call_id, vote_text) %>%
summarize(n = n(), .groups = 'drop') %>%
tidyr::pivot_wider(names_from = vote_text, values_from = n, values_fill = 0) %>%
mutate(
y_pct = Yea / (Yea + Nay),
n_pct = Nay / (Nay + Yea)
) %>%
ungroup() %>%
# Step 4: Filter based on y_pct and n_pct, and add d_vote column
mutate(
d_vote = if_else(
party == "D" & in_d_partisan_votes & y_pct != 0 & y_pct != 1,
1, 0
)
)
#pre-filter this here instead of in app
app_vote_patterns <- app_vote_patterns %>%
filter(pct_of_present != 0 & pct_of_present != 1)
app_vote_patterns <- app_vote_patterns[,c("roll_call_id","partisan_metric","hover_text","session_year","role","final","party","name")]
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/03_load_raw_tables.R", echo=TRUE)
app_d_votes <- calc_d_votes
app_r_votes <- calc_r_votes
# app tables for now, though I should embed d_votes and r_votes within the primary app_vote_patterns table
app_d_votes <- calc_d_votes
app_r_votes <- calc_r_votes
View(app_data)
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/05_load_app_layer.R", echo=TRUE)
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/05_load_app_layer.R", echo=TRUE)
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/05_load_views_and_app_layer.R", echo=TRUE)
file.copy("view_partisanship","p_partisanship")
p_partisanship <- view_partisanship
p_roll_calls_w_calc <- view_roll_calls_w_calc
rm(view_partisanship,view_roll_calls_w_calc)
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/05_load_views_and_app_layer.R", echo=TRUE)
library(tidyverse)  # A collection of R packages for data science
library(tidytext)   # Text mining using tidy data principles
library(legiscanrr) # Interface with the LegiScan API for accessing legislative data / devtools::install_github("fanghuiz/legiscanrr")
library(pscl)       # Political Science Computational Laboratory package for analyzing roll call data and IRT models
library(wnominate)  # W-NOMINATE package for scaling roll call data and estimating ideal points
library(oc)         # Optimal Classification package for scaling roll call data
library(dwnominate) # Dynamic Weighted NOMINATE for analyzing changes in voting patterns over time / remotes::install_github('wmay/dwnominate')
library(jsonlite)   # Tools for parsing, generating, and manipulating JSON data
library(SnowballC)  # Snowball stemmers for text preprocessing and stemming in natural language processing
library(future.apply)
#additional libraries for database interaction
library(DBI)
library(RPostgres)
library(progress) # to show progress bar during database write operations
library(dplyr) # allows excluding specific columns by name from sql commands (e.g. to debug heatmap_data)
#set working directory to the location of current script
setwd(script_dir <- dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions_database.R") # functions to write to Postgres database
#source("01_request_api_legiscan.R") #request LegiScan data from API
source("02_parse_legiscan.R") # parse from json files
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/02_parse_legiscan.R", echo=TRUE)
