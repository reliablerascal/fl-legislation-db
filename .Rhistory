# parse votes json as "roll calls"
temp_roll_calls_parsed <- parse_roll_calls(text_paths_votes)
#####
# helper function to extract roll call metadata and votes for parse_roll_calls
extract_roll_call <- function(input_vote_path, pb) {
pb$tick()
session_regex <- "(\\d{4}-\\d{4}_[^/]+_Session)"
session_info <- regmatches(input_vote_path, regexpr(session_regex, input_vote_path))
roll_call_data <- jsonlite::fromJSON(input_vote_path, simplifyVector = FALSE)
roll_call <- roll_call_data$roll_call
# Handle missing fields with NA using `ifelse` and `is.null`
safe_get <- function(x, default = NA) ifelse(is.null(x), default, x)
# safe_get_date <- function(x, default = NA) {
#   if (is.null(x)) {
#     return(default)
#   } else {
#     return(as.Date(x, format = "%Y-%m-%d"))
#   }
# }
# Directly access the date field and print debug statement
#raw_date <- roll_call$date
#safe_date <- safe_get(roll_call$date)
#print(paste("Roll call ID:", safe_get(roll_call$roll_call_id), "Raw Date:", raw_date, "Safe Date:", safe_date)
roll_call_meta_df <- list(
roll_call_id = safe_get(roll_call$roll_call_id),
bill_id = safe_get(roll_call$bill_id),
session = session_info,
date = safe_get(roll_call$date),
desc = safe_get(roll_call$desc),
yea = safe_get(roll_call$yea),
nay = safe_get(roll_call$nay),
nv = safe_get(roll_call$nv),
absent = safe_get(roll_call$absent),
total = safe_get(roll_call$total),
passed = safe_get(roll_call$passed),
chamber = safe_get(roll_call$chamber),
chamber_id = safe_get(roll_call$chamber_id)
)
# Convert the date field to a proper date format
#roll_call_meta_df$date <- as.Date(roll_call_meta_df$date, format="%Y-%m-%d")
votes_df <- extract_votes(roll_call$votes, roll_call$roll_call_id, session_info, pb)
return(list(meta = roll_call_meta_df, votes = votes_df))
}
print (date)
#####
# helper function to extract roll call metadata and votes for parse_roll_calls
extract_roll_call <- function(input_vote_path, pb) {
pb$tick()
session_regex <- "(\\d{4}-\\d{4}_[^/]+_Session)"
session_info <- regmatches(input_vote_path, regexpr(session_regex, input_vote_path))
roll_call_data <- jsonlite::fromJSON(input_vote_path, simplifyVector = FALSE)
roll_call <- roll_call_data$roll_call
# Handle missing fields with NA using `ifelse` and `is.null`
safe_get <- function(x, default = NA) ifelse(is.null(x), default, x)
# safe_get_date <- function(x, default = NA) {
#   if (is.null(x)) {
#     return(default)
#   } else {
#     return(as.Date(x, format = "%Y-%m-%d"))
#   }
# }
print (roll_call$date)
# Directly access the date field and print debug statement
#raw_date <- roll_call$date
#safe_date <- safe_get(roll_call$date)
#print(paste("Roll call ID:", safe_get(roll_call$roll_call_id), "Raw Date:", raw_date, "Safe Date:", safe_date)
roll_call_meta_df <- list(
roll_call_id = safe_get(roll_call$roll_call_id),
bill_id = safe_get(roll_call$bill_id),
session = session_info,
date = safe_get(roll_call$date),
desc = safe_get(roll_call$desc),
yea = safe_get(roll_call$yea),
nay = safe_get(roll_call$nay),
nv = safe_get(roll_call$nv),
absent = safe_get(roll_call$absent),
total = safe_get(roll_call$total),
passed = safe_get(roll_call$passed),
chamber = safe_get(roll_call$chamber),
chamber_id = safe_get(roll_call$chamber_id)
)
# Convert the date field to a proper date format
#roll_call_meta_df$date <- as.Date(roll_call_meta_df$date, format="%Y-%m-%d")
votes_df <- extract_votes(roll_call$votes, roll_call$roll_call_id, session_info, pb)
return(list(meta = roll_call_meta_df, votes = votes_df))
}
# parse votes json as "roll calls"
temp_roll_calls_parsed <- parse_roll_calls(text_paths_votes)
#####
# helper function to extract roll call metadata and votes for parse_roll_calls
extract_roll_call <- function(input_vote_path, pb) {
pb$tick()
session_regex <- "(\\d{4}-\\d{4}_[^/]+_Session)"
session_info <- regmatches(input_vote_path, regexpr(session_regex, input_vote_path))
roll_call_data <- jsonlite::fromJSON(input_vote_path, simplifyVector = FALSE)
roll_call <- roll_call_data$roll_call
# Handle missing fields with NA using `ifelse` and `is.null`
safe_get <- function(x, default = NA) ifelse(is.null(x), default, x)
# safe_get_date <- function(x, default = NA) {
#   if (is.null(x)) {
#     return(default)
#   } else {
#     return(as.Date(x, format = "%Y-%m-%d"))
#   }
# }
# print (roll_call$date)
# Directly access the date field and print debug statement
#raw_date <- roll_call$date
#safe_date <- safe_get(roll_call$date)
#print(paste("Roll call ID:", safe_get(roll_call$roll_call_id), "Raw Date:", raw_date, "Safe Date:", safe_date)
roll_call_meta_df <- list(
roll_call_id = safe_get(roll_call$roll_call_id),
bill_id = safe_get(roll_call$bill_id),
session = session_info,
date = safe_get(roll_call$date),
desc = safe_get(roll_call$desc),
yea = safe_get(roll_call$yea),
nay = safe_get(roll_call$nay),
nv = safe_get(roll_call$nv),
absent = safe_get(roll_call$absent),
total = safe_get(roll_call$total),
passed = safe_get(roll_call$passed),
chamber = safe_get(roll_call$chamber),
chamber_id = safe_get(roll_call$chamber_id)
)
# Convert the date field to a proper date format
#roll_call_meta_df$date <- as.Date(roll_call_meta_df$date, format="%Y-%m-%d")
votes_df <- extract_votes(roll_call$votes, roll_call$roll_call_id, session_info, pb)
return(list(meta = roll_call_meta_df, votes = votes_df))
}
# parse votes json as "roll calls"
temp_roll_calls_parsed <- parse_roll_calls(text_paths_votes)
roll_calls <- temp_roll_calls_parsed$meta
summary(roll_calls$date)
legislator_votes <- temp_roll_calls_parsed$votes
rm("temp_roll_calls_parsed")
# trying to get rid of bill_detailed
# renamed votes_all to roll_calls_w_bill_info
roll_calls_detailed <- left_join(roll_calls,bills, by = "bill_id")
roll_calls_detailed <- roll_calls_detailed %>% mutate(
pct_of_total = yea/total,
n_present = yea+nay,
pct_of_present = yea/n_present
)
#convert roll call id to character (not sure why)
legislator_votes <- legislator_votes %>% mutate(roll_call_id = as.character(roll_call_id))
roll_calls_detailed <- roll_calls_detailed %>% mutate(roll_call_id = as.character(roll_call_id))
#broke this 3-way join into two steps- first join legislator-votes with legislator details, then join with roll call details
temp_legislator_votes_detailed <- legislator_votes %>%
inner_join(legislator_sessions, by = c("people_id", "session"))
temp_legislator_votes_detailed <- temp_legislator_votes_detailed %>%
inner_join(roll_calls_detailed, by = c("roll_call_id", "session"))
# primary key should at least be roll_call_id and party, so 2x the number of roll_calls minus anything filtered out
temp_analyze_bill <- temp_legislator_votes_detailed %>% group_by(party,roll_call_id,title,vote_text,number) %>% summarize(n=n()) %>% arrange(desc(n)) %>% pivot_wider(values_from = n,names_from = vote_text,values_fill = 0) %>% mutate(total=sum(Yea,NV,Absent,Nay,na.rm = TRUE),total2=sum(Yea,Nay)) %>% filter(total>0 & total2 >0) %>% mutate(y_pct = Yea/total,n_pct=Nay/total,nv_pct=NV/total, absent_pct=Absent/total,NV_A=(NV+Absent)/total,y_pct2 = Yea/(Yea+Nay),n_pct2 = Nay/(Yea+Nay),margin=y_pct2-n_pct2)
# create partisanship variables
partisanbillvotes <- temp_analyze_bill %>%   select(party,roll_call_id,title,y_pct2,number) %>%
pivot_wider(names_from = party,values_from=y_pct2,values_fill = NA,id_cols = c(roll_call_id,title,number)) %>%
mutate(
`D-R`=D-R,
Partisan = NA_character_,
GOP = NA_character_,
DEM = NA_character_
)
partisanbillvotes <- partisanbillvotes %>%
mutate(
Partisan = case_when(
is.na(`D-R`) ~ "Unclear",
`D-R` < -0.75 ~ "Very GOP",
`D-R` < -0.25 ~ "GOP",
`D-R` < 0 ~ "Somewhat GOP",
`D-R` == 0 ~ "Split",
`D-R` > 0.75 ~ "Very DEM",
`D-R` > 0.25 ~ "DEM",
`D-R` > 0 ~ "Somewhat DEM",
TRUE ~ Partisan
),
GOP = case_when(
R == 1 ~ "GOP Unanimously Support",
R > 0.9 ~ "GOP Very Strongly Support",
R > 0.75 ~ "GOP Moderately Support",
R > 0.5 ~ "GOP Support",
R == 0.5 ~ "GOP Split",
R < 0.1 ~ "GOP Very Strongly Oppose",
R < 0.25 ~ "GOP Moderately Oppose",
R < 0.5 ~ "GOP Oppose",
R == 0 ~ "GOP Unanimously Oppose",
TRUE ~ GOP
),
DEM = case_when(
D == 1 ~ "DEM Unanimously Support",
D > 0.9 ~ "DEM Very Strongly Support",
D > 0.75 ~ "DEM Strongly Support",
D > 0.5 ~ "DEM Support",
D == 0.5 ~ "DEM Split",
D < 0.1 ~ "DEM Very Strongly Oppose",
D < 0.25 ~ "DEM Moderately Oppose",
D < 0.5 ~ "DEM Oppose",
D == 0 ~ "DEM Unanimously Oppose",
is.na(D) ~ "DEM No Votes",
TRUE ~ DEM
)
)
###########################################
#                                         #
# 2b) leg_votes_partisanship analysis     #
#                                         #
###########################################
# join detailed legislative votes with partisanship analysis, removing nulls, initialize and set defaults for calculated fields
leg_votes_partisanship <- temp_legislator_votes_detailed %>% filter(!is.na(date)&total>0)
leg_votes_partisanship <- left_join(leg_votes_partisanship,partisanbillvotes, by = 'roll_call_id') %>% filter(!is.na(D)&!is.na(R)&!is.na(`D-R`))
leg_votes_partisanship <- leg_votes_partisanship %>% arrange(desc(abs(`D-R`)))
leg_votes_partisanship <- leg_votes_partisanship %>%
mutate(
dem_majority = NA_character_,
gop_majority = NA_character_,
bill_alignment = NA_character_,
priority_bills = "N"
)
leg_votes_partisanship <- leg_votes_partisanship %>%
mutate(
dem_majority = case_when(
D > 0.5 ~ "Y",
D < 0.5 ~ "N",
D == 0.5 ~ "Equal",
TRUE ~ dem_majority
),
gop_majority = case_when(
R > 0.5 ~ "Y",
R < 0.5 ~ "N",
R == 0.5 ~ "Equal",
TRUE ~ gop_majority
)
)
leg_votes_partisanship$priority_bills[abs(leg_votes_partisanship$`D-R`)>.85] <- "Y"
leg_votes_partisanship <- leg_votes_partisanship %>%
mutate(vote_with_dem_majority = ifelse(dem_majority == "Y" & vote_text=="Yea", 1, 0),
vote_with_gop_majority = ifelse(gop_majority == "Y" & vote_text=="Yea", 1, 0),
vote_with_neither = ifelse((dem_majority == "Y" & gop_majority == "Y" & vote_text=="Nay") |
(dem_majority=="N" & gop_majority == "N" & vote_text=="Yea"),1,0),
vote_with_dem_majority = ifelse((dem_majority == "Y" & vote_text == "Yea")|dem_majority=="N" & vote_text=="Nay", 1, 0),
vote_with_gop_majority = ifelse((gop_majority == "Y" & vote_text == "Yea")|gop_majority=="N" & vote_text=="Nay", 1, 0),
vote_with_neither = ifelse(
(dem_majority == "Y" & gop_majority == "Y" & vote_text == "Nay") | (dem_majority == "N" & gop_majority == "N" & vote_text == "Yea"), 1, 0),
voted_at_all = vote_with_dem_majority+vote_with_gop_majority+vote_with_neither,
maverick_votes=ifelse((party=="D" & vote_text=="Yea" & dem_majority=="N" & gop_majority=="Y") |
(party=="D" & vote_text=="Nay" & dem_majority=="Y" & gop_majority=="N") |
(party=="R" & vote_text=="Yea" & gop_majority=="N" & dem_majority=="Y") |
(party=="R" & vote_text=="Nay" & gop_majority=="Y" & dem_majority=="N"),1,0 ))
leg_votes_partisanship <- leg_votes_partisanship %>%
mutate(
bill_alignment = case_when(
D == 0.5 | R == 0.5 ~ "at least one party even",
D > 0.5 & R < 0.5 ~ "DEM",
D < 0.5 & R > 0.5 ~ "GOP",
D < 0.5 & R < 0.5 ~ "Both",
D > 0.5 & R > 0.5 ~ "Both",
TRUE ~ bill_alignment
)
)
temp_party_majority_votes <- leg_votes_partisanship %>% filter(party!=""& !is.na(party)) %>%
group_by(roll_call_id, party) %>%
summarize(majority_vote = if_else(sum(vote_text == "Yea") > sum(vote_text == "Nay"), "Yea", "Nay"), .groups = 'drop') %>%
pivot_wider(names_from = party,values_from = majority_vote,id_cols = roll_call_id,values_fill = "NA",names_prefix = "vote_")
heatmap_data <- leg_votes_partisanship %>%
left_join(temp_party_majority_votes, by = c("roll_call_id")) %>%
filter(!is.na(party)&party!="" & !grepl("2010",session_name,ignore.case=TRUE)& !is.na(session_name)) %>%
filter(vote_text=="Yea"|vote_text=="Nay") %>%
mutate(diff_party_vote_d = if_else(vote_text != vote_D, 1, 0),diff_party_vote_r = if_else(vote_text != vote_R, 1, 0),
diff_both_parties = if_else(diff_party_vote_d == 1 & diff_party_vote_r == 1,1,0),
diff_d_not_r=if_else(diff_party_vote_d==1 & diff_party_vote_r==0,1,0),
diff_r_not_d=if_else(diff_party_vote_d==0&diff_party_vote_r==1,1,0),
partisan_metric = ifelse(party=="R",diff_r_not_d,ifelse(party=="D",diff_d_not_r,NA)),
pct_format = scales::percent(pct)) %>% arrange(desc(partisan_metric)) %>% distinct()
View(temp_party_majority_votes)
heatmap_data <- leg_votes_partisanship %>%
left_join(temp_party_majority_votes, by = c("roll_call_id")) %>%
filter(!is.na(party)&party!="" & !grepl("2010",session_name,ignore.case=TRUE)& !is.na(session_name)) %>%
filter(vote_text=="Yea"|vote_text=="Nay") %>%
mutate(diff_party_vote_d = if_else(vote_text != vote_D, 1, 0),diff_party_vote_r = if_else(vote_text != vote_R, 1, 0),
diff_both_parties = if_else(diff_party_vote_d == 1 & diff_party_vote_r == 1,1,0),
diff_d_not_r=if_else(diff_party_vote_d==1 & diff_party_vote_r==0,1,0),
diff_r_not_d=if_else(diff_party_vote_d==0&diff_party_vote_r==1,1,0),
partisan_metric = ifelse(party=="R",diff_r_not_d,ifelse(party=="D",diff_d_not_r,NA)),
pct_format = scales::percent(pct)) %>% arrange(desc(partisan_metric)) %>% distinct()
heatmap_data <- leg_votes_partisanship %>%
left_join(temp_party_majority_votes, by = c("roll_call_id")) %>%
filter(!is.na(party)&party!="" & !grepl("2010",session_name,ignore.case=TRUE)& !is.na(session_name)) %>%
filter(vote_text=="Yea"|vote_text=="Nay") %>%
mutate(diff_party_vote_d = if_else(vote_text != vote_D, 1, 0),diff_party_vote_r = if_else(vote_text != vote_R, 1, 0),
diff_both_parties = if_else(diff_party_vote_d == 1 & diff_party_vote_r == 1,1,0),
diff_d_not_r=if_else(diff_party_vote_d==1 & diff_party_vote_r==0,1,0),
diff_r_not_d=if_else(diff_party_vote_d==0&diff_party_vote_r==1,1,0),
partisan_metric = ifelse(party=="R",diff_r_not_d,ifelse(party=="D",diff_d_not_r,NA)),
pct_format = scales::percent(pct_of_total)) %>% arrange(desc(partisan_metric)) %>% distinct()
heatmap_data <- leg_votes_partisanship %>%
left_join(temp_party_majority_votes, by = c("roll_call_id")) %>%
filter(!is.na(party)&party!="" & !grepl("2010",session_name,ignore.case=TRUE)& !is.na(session_name)) %>%
filter(vote_text=="Yea"|vote_text=="Nay") %>%
mutate(diff_party_vote_d = if_else(vote_text != vote_D, 1, 0),diff_party_vote_r = if_else(vote_text != vote_R, 1, 0),
diff_both_parties = if_else(diff_party_vote_d == 1 & diff_party_vote_r == 1,1,0),
diff_d_not_r=if_else(diff_party_vote_d==1 & diff_party_vote_r==0,1,0),
diff_r_not_d=if_else(diff_party_vote_d==0&diff_party_vote_r==1,1,0),
partisan_metric = ifelse(party=="R",diff_r_not_d,ifelse(party=="D",diff_d_not_r,NA)),
pct_format = scales::percent(pct_of_total)) %>% arrange(desc(partisan_metric)) %>% distinct()
View(heatmap_data)
View(heatmap_data)
heatmap_data$roll_call_id = with(heatmap_data, reorder(roll_call_id, partisan_metric, sum))
heatmap_data$name = with(heatmap_data, reorder(name, partisan_metric, sum))
# re-order data for better visualization
heatmap_data$roll_call_id = with(heatmap_data, reorder(roll_call_id, partisan_metric, sum))
heatmap_data$name = with(heatmap_data, reorder(name, partisan_metric, sum))
# creates an overall partisanship metric for each legislator, filters for dates >= 11/10/12?
legislator_metric <- heatmap_data %>% group_by(name) %>% filter(date >= as.Date("11/10/2012")) %>% summarize(partisan_metric=mean(partisan_metric)) %>% arrange(partisan_metric,name) #create the sort based on partisan metric
View(legislator_metric)
# creates an overall partisanship metric for each legislator, filters for dates >= 11/10/12?
legislator_mean_partisanship <- heatmap_data %>% group_by(name) %>% filter(date >= as.Date("11/10/2012")) %>% summarize(partisan_metric=mean(partisan_metric)) %>% arrange(partisan_metric,name) #create the sort based on partisan metric
### create the text to be displayed in the javascript interactive when hovering over votes ####
createHoverText <- function(numbers, descriptions, urls, pcts, vote_texts,descs,title,date, names, width = 100) {
# Wrap the description text at the specified width
wrapped_descriptions <- sapply(descriptions, function(desc) paste(strwrap(desc, width = width), collapse = "<br>"))
# Combine the elements into a single string
paste(
names, " voted ", vote_texts, " on ", descs, " for bill ",numbers," - ",title," on ",date,"<br>",
"Description: ", wrapped_descriptions, "<br>",
"URL: ", urls, "<br>",
pcts, " voted for this bill",
sep = ""
)
}
heatmap_data$hover_text <- mapply(
createHoverText,
numbers = heatmap_data$number,
descs = heatmap_data$desc,
title=heatmap_data$title,date=heatmap_data$date,
descriptions = heatmap_data$description,
urls = heatmap_data$url,
pcts = heatmap_data$pct_format,
vote_texts = heatmap_data$vote_text,
names = heatmap_data$name,
SIMPLIFY = FALSE  # Keep it as a list
)
heatmap_data$hover_text <- sapply(heatmap_data$hover_text, paste, collapse = " ")  # Collapse the list into a single string
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/04_transform.R", echo=TRUE)
# trying to get rid of bill_detailed
# renamed votes_all to roll_calls_w_bill_info
roll_calls_detailed <- left_join(roll_calls,bills, by = "bill_id")
roll_calls_detailed <- roll_calls_detailed %>% mutate(
pct_of_total = yea/total,
n_present = yea+nay,
pct_of_present = yea/n_present
)
roll_calls_detailed <- roll_calls_detailed %>% arrange(pct_of_present)
#convert roll call id to character (not sure why)
legislator_votes <- legislator_votes %>% mutate(roll_call_id = as.character(roll_call_id))
roll_calls_detailed <- roll_calls_detailed %>% mutate(roll_call_id = as.character(roll_call_id))
#broke this 3-way join into two steps- first join legislator-votes with legislator details, then join with roll call details
temp_legislator_votes_detailed <- legislator_votes %>%
inner_join(legislator_sessions, by = c("people_id", "session"))
temp_legislator_votes_detailed <- temp_legislator_votes_detailed %>%
inner_join(roll_calls_detailed, by = c("roll_call_id", "session"))
# primary key should at least be roll_call_id and party, so 2x the number of roll_calls minus anything filtered out
temp_analyze_bill <- temp_legislator_votes_detailed %>% group_by(party,roll_call_id,title,vote_text,number) %>% summarize(n=n()) %>% arrange(desc(n)) %>% pivot_wider(values_from = n,names_from = vote_text,values_fill = 0) %>% mutate(total=sum(Yea,NV,Absent,Nay,na.rm = TRUE),total2=sum(Yea,Nay)) %>% filter(total>0 & total2 >0) %>% mutate(y_pct = Yea/total,n_pct=Nay/total,nv_pct=NV/total, absent_pct=Absent/total,NV_A=(NV+Absent)/total,y_pct2 = Yea/(Yea+Nay),n_pct2 = Nay/(Yea+Nay),margin=y_pct2-n_pct2)
# create partisanship variables
partisanbillvotes <- temp_analyze_bill %>%   select(party,roll_call_id,title,y_pct2,number) %>%
pivot_wider(names_from = party,values_from=y_pct2,values_fill = NA,id_cols = c(roll_call_id,title,number)) %>%
mutate(
`D-R`=D-R,
Partisan = NA_character_,
GOP = NA_character_,
DEM = NA_character_
)
partisanbillvotes <- partisanbillvotes %>%
mutate(
Partisan = case_when(
is.na(`D-R`) ~ "Unclear",
`D-R` < -0.75 ~ "Very GOP",
`D-R` < -0.25 ~ "GOP",
`D-R` < 0 ~ "Somewhat GOP",
`D-R` == 0 ~ "Split",
`D-R` > 0.75 ~ "Very DEM",
`D-R` > 0.25 ~ "DEM",
`D-R` > 0 ~ "Somewhat DEM",
TRUE ~ Partisan
),
GOP = case_when(
R == 1 ~ "GOP Unanimously Support",
R > 0.9 ~ "GOP Very Strongly Support",
R > 0.75 ~ "GOP Moderately Support",
R > 0.5 ~ "GOP Support",
R == 0.5 ~ "GOP Split",
R < 0.1 ~ "GOP Very Strongly Oppose",
R < 0.25 ~ "GOP Moderately Oppose",
R < 0.5 ~ "GOP Oppose",
R == 0 ~ "GOP Unanimously Oppose",
TRUE ~ GOP
),
DEM = case_when(
D == 1 ~ "DEM Unanimously Support",
D > 0.9 ~ "DEM Very Strongly Support",
D > 0.75 ~ "DEM Strongly Support",
D > 0.5 ~ "DEM Support",
D == 0.5 ~ "DEM Split",
D < 0.1 ~ "DEM Very Strongly Oppose",
D < 0.25 ~ "DEM Moderately Oppose",
D < 0.5 ~ "DEM Oppose",
D == 0 ~ "DEM Unanimously Oppose",
is.na(D) ~ "DEM No Votes",
TRUE ~ DEM
)
)
###########################################
#                                         #
# 2b) leg_votes_partisanship analysis     #
#                                         #
###########################################
# join detailed legislative votes with partisanship analysis, removing nulls, initialize and set defaults for calculated fields
leg_votes_partisanship <- temp_legislator_votes_detailed %>% filter(!is.na(date)&total>0)
leg_votes_partisanship <- left_join(leg_votes_partisanship,partisanbillvotes, by = 'roll_call_id') %>% filter(!is.na(D)&!is.na(R)&!is.na(`D-R`))
leg_votes_partisanship <- leg_votes_partisanship %>% arrange(desc(abs(`D-R`)))
leg_votes_partisanship <- leg_votes_partisanship %>%
mutate(
dem_majority = NA_character_,
gop_majority = NA_character_,
bill_alignment = NA_character_,
priority_bills = "N"
)
leg_votes_partisanship <- leg_votes_partisanship %>%
mutate(
dem_majority = case_when(
D > 0.5 ~ "Y",
D < 0.5 ~ "N",
D == 0.5 ~ "Equal",
TRUE ~ dem_majority
),
gop_majority = case_when(
R > 0.5 ~ "Y",
R < 0.5 ~ "N",
R == 0.5 ~ "Equal",
TRUE ~ gop_majority
)
)
leg_votes_partisanship$priority_bills[abs(leg_votes_partisanship$`D-R`)>.85] <- "Y"
leg_votes_partisanship <- leg_votes_partisanship %>%
mutate(vote_with_dem_majority = ifelse(dem_majority == "Y" & vote_text=="Yea", 1, 0),
vote_with_gop_majority = ifelse(gop_majority == "Y" & vote_text=="Yea", 1, 0),
vote_with_neither = ifelse((dem_majority == "Y" & gop_majority == "Y" & vote_text=="Nay") |
(dem_majority=="N" & gop_majority == "N" & vote_text=="Yea"),1,0),
vote_with_dem_majority = ifelse((dem_majority == "Y" & vote_text == "Yea")|dem_majority=="N" & vote_text=="Nay", 1, 0),
vote_with_gop_majority = ifelse((gop_majority == "Y" & vote_text == "Yea")|gop_majority=="N" & vote_text=="Nay", 1, 0),
vote_with_neither = ifelse(
(dem_majority == "Y" & gop_majority == "Y" & vote_text == "Nay") | (dem_majority == "N" & gop_majority == "N" & vote_text == "Yea"), 1, 0),
voted_at_all = vote_with_dem_majority+vote_with_gop_majority+vote_with_neither,
maverick_votes=ifelse((party=="D" & vote_text=="Yea" & dem_majority=="N" & gop_majority=="Y") |
(party=="D" & vote_text=="Nay" & dem_majority=="Y" & gop_majority=="N") |
(party=="R" & vote_text=="Yea" & gop_majority=="N" & dem_majority=="Y") |
(party=="R" & vote_text=="Nay" & gop_majority=="Y" & dem_majority=="N"),1,0 ))
leg_votes_partisanship <- leg_votes_partisanship %>%
mutate(
bill_alignment = case_when(
D == 0.5 | R == 0.5 ~ "at least one party even",
D > 0.5 & R < 0.5 ~ "DEM",
D < 0.5 & R > 0.5 ~ "GOP",
D < 0.5 & R < 0.5 ~ "Both",
D > 0.5 & R > 0.5 ~ "Both",
TRUE ~ bill_alignment
)
)
temp_party_majority_votes <- leg_votes_partisanship %>% filter(party!=""& !is.na(party)) %>%
group_by(roll_call_id, party) %>%
summarize(majority_vote = if_else(sum(vote_text == "Yea") > sum(vote_text == "Nay"), "Yea", "Nay"), .groups = 'drop') %>%
pivot_wider(names_from = party,values_from = majority_vote,id_cols = roll_call_id,values_fill = "NA",names_prefix = "vote_")
app_data <- leg_votes_partisanship %>%
left_join(temp_party_majority_votes, by = c("roll_call_id")) %>%
filter(!is.na(party)&party!="" & !grepl("2010",session_name,ignore.case=TRUE)& !is.na(session_name)) %>%
filter(vote_text=="Yea"|vote_text=="Nay") %>%
mutate(diff_party_vote_d = if_else(vote_text != vote_D, 1, 0),diff_party_vote_r = if_else(vote_text != vote_R, 1, 0),
diff_both_parties = if_else(diff_party_vote_d == 1 & diff_party_vote_r == 1,1,0),
diff_d_not_r=if_else(diff_party_vote_d==1 & diff_party_vote_r==0,1,0),
diff_r_not_d=if_else(diff_party_vote_d==0&diff_party_vote_r==1,1,0),
partisan_metric = ifelse(party=="R",diff_r_not_d,ifelse(party=="D",diff_d_not_r,NA)),
pct_format = scales::percent(pct_of_total)) %>% arrange(desc(partisan_metric)) %>% distinct()
# re-order data for better visualization
app_data$roll_call_id = with(app_data, reorder(roll_call_id, partisan_metric, sum))
app_data$name = with(app_data, reorder(name, partisan_metric, sum))
# creates an overall partisanship metric for each legislator, filters for dates >= 11/10/12?
legislator_mean_partisanship <- app_data %>% group_by(name) %>% filter(date >= as.Date("11/10/2012")) %>% summarize(partisan_metric=mean(partisan_metric)) %>% arrange(partisan_metric,name) #create the sort based on partisan metric
### create the text to be displayed in the javascript interactive when hovering over votes ####
createHoverText <- function(numbers, descriptions, urls, pcts, vote_texts,descs,title,date, names, width = 100) {
# Wrap the description text at the specified width
wrapped_descriptions <- sapply(descriptions, function(desc) paste(strwrap(desc, width = width), collapse = "<br>"))
# Combine the elements into a single string
paste(
names, " voted ", vote_texts, " on ", descs, " for bill ",numbers," - ",title," on ",date,"<br>",
"Description: ", wrapped_descriptions, "<br>",
"URL: ", urls, "<br>",
pcts, " voted for this bill",
sep = ""
)
}
app_data$hover_text <- mapply(
createHoverText,
numbers = app_data$number,
descs = app_data$desc,
title=app_data$title,date=app_data$date,
descriptions = app_data$description,
urls = app_data$url,
pcts = app_data$pct_format,
vote_texts = app_data$vote_text,
names = app_data$name,
SIMPLIFY = FALSE  # Keep it as a list
)
rm(list=ls())
