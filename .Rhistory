#                                         #
###########################################
# join detailed legislative votes with partisanship analysis, removing nulls, initialize and set defaults for calculated fields
calc_votes_partisanship <- calc_legislator_votes %>%
filter(!is.na(roll_call_date)&total>0)
# %>% # select(roll_call_id, R, D, DminusR, Partisan, GOP, DEM),
calc_votes_partisanship <- calc_votes_partisanship %>%
left_join(
calc_partisanbillvotes,
by = 'roll_call_id'
) %>%
filter(!is.na(D) & !is.na(R) & !is.na(DminusR))
calc_votes_partisanship <- calc_votes_partisanship %>% arrange(desc(abs(DminusR)))
calc_votes_partisanship <- calc_votes_partisanship %>%
mutate(
dem_majority = NA_character_,
gop_majority = NA_character_,
bill_alignment = NA_character_,
priority_bills = "N"
)
calc_votes_partisanship <- calc_votes_partisanship %>%
mutate(
dem_majority = case_when(
D > 0.5 ~ "Y",
D < 0.5 ~ "N",
D == 0.5 ~ "Equal",
TRUE ~ dem_majority
),
gop_majority = case_when(
R > 0.5 ~ "Y",
R < 0.5 ~ "N",
R == 0.5 ~ "Equal",
TRUE ~ gop_majority
)
)
calc_votes_partisanship$priority_bills[abs(calc_votes_partisanship$DminusR)>.85] <- "Y"
calc_votes_partisanship <- calc_votes_partisanship %>%
mutate(vote_with_dem_majority = ifelse(dem_majority == "Y" & vote_text=="Yea", 1, 0),
vote_with_gop_majority = ifelse(gop_majority == "Y" & vote_text=="Yea", 1, 0),
vote_with_neither = ifelse((dem_majority == "Y" & gop_majority == "Y" & vote_text=="Nay") |
(dem_majority=="N" & gop_majority == "N" & vote_text=="Yea"),1,0),
vote_with_dem_majority = ifelse((dem_majority == "Y" & vote_text == "Yea")|dem_majority=="N" & vote_text=="Nay", 1, 0),
vote_with_gop_majority = ifelse((gop_majority == "Y" & vote_text == "Yea")|gop_majority=="N" & vote_text=="Nay", 1, 0),
vote_with_neither = ifelse(
(dem_majority == "Y" & gop_majority == "Y" & vote_text == "Nay") | (dem_majority == "N" & gop_majority == "N" & vote_text == "Yea"), 1, 0),
voted_at_all = vote_with_dem_majority+vote_with_gop_majority+vote_with_neither,
maverick_votes=ifelse((party=="D" & vote_text=="Yea" & dem_majority=="N" & gop_majority=="Y") |
(party=="D" & vote_text=="Nay" & dem_majority=="Y" & gop_majority=="N") |
(party=="R" & vote_text=="Yea" & gop_majority=="N" & dem_majority=="Y") |
(party=="R" & vote_text=="Nay" & gop_majority=="Y" & dem_majority=="N"),1,0 ))
calc_votes_partisanship <- calc_votes_partisanship %>%
mutate(
bill_alignment = case_when(
D == 0.5 | R == 0.5 ~ "at least one party even",
D > 0.5 & R < 0.5 ~ "DEM",
D < 0.5 & R > 0.5 ~ "GOP",
D < 0.5 & R < 0.5 ~ "Both",
D > 0.5 & R > 0.5 ~ "Both",
TRUE ~ bill_alignment
)
)
calc_party_majority_votes <- calc_votes_partisanship %>% filter(party!=""& !is.na(party)) %>%
group_by(roll_call_id, party) %>%
summarize(majority_vote = if_else(sum(vote_text == "Yea") > sum(vote_text == "Nay"), "Yea", "Nay"), .groups = 'drop') %>%
pivot_wider(names_from = party,values_from = majority_vote,id_cols = roll_call_id,values_fill = "NA",names_prefix = "vote_")
# workaround 6/27/24 replaced session_name with session, twice in the first filter below
p_partisanship <- calc_votes_partisanship %>%
left_join(calc_party_majority_votes, by = c("roll_call_id")) %>%
filter(!is.na(party)&party!="" & !grepl("2010",session,ignore.case=TRUE)& !is.na(session)) %>%
filter(vote_text=="Yea"|vote_text=="Nay") %>%
mutate(diff_party_vote_d = if_else(vote_text != vote_D, 1, 0),diff_party_vote_r = if_else(vote_text != vote_R, 1, 0),
diff_both_parties = if_else(diff_party_vote_d == 1 & diff_party_vote_r == 1,1,0),
diff_d_not_r=if_else(diff_party_vote_d==1 & diff_party_vote_r==0,1,0),
diff_r_not_d=if_else(diff_party_vote_d==0&diff_party_vote_r==1,1,0),
partisan_metric = ifelse(party=="R",diff_r_not_d,ifelse(party=="D",diff_d_not_r,NA)),
pct_voted_for = scales::percent(pct_of_total)) %>% arrange(desc(partisan_metric)) %>% distinct()
# re-order data for better visualization
p_partisanship$roll_call_id = with(p_partisanship, reorder(roll_call_id, partisan_metric, sum))
p_partisanship$name = with(p_partisanship, reorder(name, partisan_metric, sum))
# workaround 6/27/24 replaced session_name with session, twice in the first filter below
p_partisanship <- calc_votes_partisanship %>%
left_join(calc_party_majority_votes, by = c("roll_call_id")) %>%
filter(!is.na(party)&party!="" & !grepl("2010",session,ignore.case=TRUE)& !is.na(session)) %>%
filter(vote_text=="Yea"|vote_text=="Nay") %>%
mutate(diff_party_vote_d = if_else(vote_text != vote_D, 1, 0),diff_party_vote_r = if_else(vote_text != vote_R, 1, 0),
diff_both_parties = if_else(diff_party_vote_d == 1 & diff_party_vote_r == 1,1,0),
diff_d_not_r=if_else(diff_party_vote_d==1 & diff_party_vote_r==0,1,0),
diff_r_not_d=if_else(diff_party_vote_d==0&diff_party_vote_r==1,1,0),
partisan_metric = ifelse(party=="R",diff_r_not_d,ifelse(party=="D",diff_d_not_r,NA)),
pct_voted_for = scales::percent(pct_of_total)) %>% arrange(desc(partisan_metric)) %>% distinct()
# re-order data for better visualization
p_partisanship$roll_call_id = with(p_partisanship, reorder(roll_call_id, partisan_metric, sum))
p_partisanship$legislator_name = with(p_partisanship, reorder(legislator_name, partisan_metric, sum))
# creates an overall partisanship metric for each legislator, filters for dates >= 11/10/12?
# this is used later to sort the dataframe
calc_legislator_mean_partisanship <- p_partisanship %>% group_by(legislator_name) %>% filter(roll_call_date >= as.Date("11/10/2012")) %>% summarize(partisan_metric=mean(partisan_metric)) %>% arrange(partisan_metric,name) #create the sort based on partisan metric
# creates an overall partisanship metric for each legislator, filters for dates >= 11/10/12?
# this is used later to sort the dataframe
calc_legislator_mean_partisanship <- p_partisanship %>% group_by(legislator_name) %>% filter(roll_call_date >= as.Date("11/10/2012")) %>% summarize(partisan_metric=mean(partisan_metric)) %>% arrange(partisan_metric,legislator_name) #create the sort based on partisan metric
View(p_partisanship)
###########################################
#                                         #
# 3) STOPGAP HARDCODING                   #
#                                         #
###########################################
#6/28/24 this works fine, but should debug and find the problem upstream
p_partisanship$bill_number = p_partisanship$number.x
p_partisanship$title = p_partisanship$title.x
###########################################
#                                         #
# 3) STOPGAP HARDCODING                   #
#                                         #
###########################################
#6/28/24 this works fine, but should debug and find the problem upstream
p_partisanship$bill_number = p_partisanship$bill_number.x
p_partisanship$bill_title = p_partisanship$bill_title.x
p_partisanship <- p_partisanship %>%
select(-bill_title.x,-bill_title.y,-bill_number.x,-bill_number.y)
###########################################
#                                         #
# 3) build app layer  (general)           #
#                                         #
###########################################
app_data <- p_partisanship
###########################################
#                                         #
# 3) build app layer  (general)           #
#                                         #
###########################################
app_data <- p_partisanship
#was partisan_metric2
app_data$partisan_metric <- ifelse(app_data$vote_with_neither == 1, 1,
ifelse(app_data$maverick_votes == 1, 2, 0))
#was partisan_metric3
app_data$partisan_metric_desc <- factor(app_data$partisan_metric,
levels = c(0, 1, 2),
labels = c("With Party", "Independent Vote", "Maverick Vote"))
calc_d_partisan_votes <- app_data %>% filter(party=="D") %>% group_by(roll_call_id) %>% summarize(max=max(partisan_metric)) %>% filter(max>=1)
calc_r_partisan_votes <- app_data %>% filter(party=="R") %>% group_by(roll_call_id) %>% summarize(max=max(partisan_metric)) %>% filter(max>=1)
calc_d_votes <- app_data %>% filter(party=="D") %>% group_by(roll_call_id,vote_text) %>% summarize(n=n()) %>%  pivot_wider(names_from=vote_text,values_from=n,values_fill = 0) %>% mutate(y_pct = Yea/(Yea+Nay),n_pct = Nay/(Nay+Yea)) %>% filter(y_pct != 0 & y_pct != 1) %>% filter(as.character(roll_call_id) %in% as.character(calc_d_partisan_votes$roll_call_id))
calc_r_votes <- app_data %>% filter(party=="R") %>% group_by(roll_call_id,vote_text) %>% summarize(n=n()) %>%  pivot_wider(names_from=vote_text,values_from=n,values_fill = 0) %>% mutate(y_pct = Yea/(Yea+Nay),n_pct = Nay/(Nay+Yea)) %>% filter(y_pct != 0 & y_pct != 1) %>% filter(as.character(roll_call_id) %in% as.character(calc_r_partisan_votes$roll_call_id))
calc_roll_call_to_number <- app_data %>%
select(roll_call_id, year=session_year,number) %>%
distinct() %>%
arrange(desc(year),number,roll_call_id)
calc_roll_call_to_number <- app_data %>%
select(roll_call_id, year=session_year,bill_number) %>%
distinct() %>%
arrange(desc(year),bill_number,roll_call_id)
calc_roll_call_to_number$number_year <- paste(calc_roll_call_to_number$number,"-",calc_roll_call_to_number$year)
calc_roll_call_to_number$number_year <- paste(calc_roll_call_to_number$bill_number,"-",calc_roll_call_to_number$year)
app_data$roll_call_id <- factor(app_data$roll_call_id, levels = calc_roll_call_to_number$roll_call_id)
app_data$legislator_name <- factor(app_data$name, levels = calc_legislator_mean_partisanship$name)
app_data$legislator_name <- factor(app_data$legislator_name, levels = calc_legislator_mean_partisanship$legislator_name)
y_labels <- setNames(calc_roll_call_to_number$number_year, calc_roll_call_to_number$roll_call_id)
app_data$final <- "N"
app_data$final[grepl("third",app_data$desc,ignore.case=TRUE)] <- "Y"
app_data$final[grepl("third",app_data$bill_desc,ignore.case=TRUE)] <- "Y"
app_data$ballotpedia2 <- paste0("http://ballotpedia.org/",app_data$ballotpedia)
View(t_bills)
View(t_roll_calls)
View(t_bills)
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/04_transform.R", echo=TRUE)
app_vote_patterns <- app_data %>%
filter(pct_of_present != 0 & pct_of_present != 1) %>%
select(roll_call_id, legislator_name, partisan_metric, session_year, role, final_vote, party, bill_number, roll_call_desc, bill_title, roll_call_date, bill_desc, bill_url, pct_voted_for, vote_text, legislator_name)
View(app_vote_patterns)
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/05_load_views_and_app_layer.R", echo=TRUE)
educ_bill_numbers <- c('H0001','H0105','H0491','H0791','H0799','H1045','H1065','H7001','H7032','S0240','S0664','S2502')
jct_bill_categories <- tibble (
bill_number = c('H0001',),
session_id = 1987,
bill_category = 'education'
)
library(tidyverse)  # A collection of R packages for data science
library(tidytext)   # Text mining using tidy data principles
library(legiscanrr) # Interface with the LegiScan API for accessing legislative data / devtools::install_github("fanghuiz/legiscanrr")
library(pscl)       # Political Science Computational Laboratory package for analyzing roll call data and IRT models
library(wnominate)  # W-NOMINATE package for scaling roll call data and estimating ideal points
library(oc)         # Optimal Classification package for scaling roll call data
library(dwnominate) # Dynamic Weighted NOMINATE for analyzing changes in voting patterns over time / remotes::install_github('wmay/dwnominate')
library(jsonlite)   # Tools for parsing, generating, and manipulating JSON data
library(SnowballC)  # Snowball stemmers for text preprocessing and stemming in natural language processing
library(future.apply)
#additional libraries for database interaction
library(DBI)
library(RPostgres)
library(progress) # to show progress bar during database write operations
library(dplyr) # allows excluding specific columns by name from sql commands (e.g. to debug heatmap_data)
#set working directory to the location of current script
setwd(script_dir <- dirname(rstudioapi::getActiveDocumentContext()$path))
source("functions_database.R") # functions to write to Postgres database
#source("01_request_api_legiscan.R") #request LegiScan data from API
source("02_parse_legiscan.R") # parse from json files
educ_bill_numbers <- c('H0001','H0105','H0491','H0791','H0799','H1045','H1065','H7001','H7032','S0240','S0664','S2502')
jct_bill_categories <- tibble (
bill_number = c('H0001',),
session_id = 1987,
bill_category = 'education'
)
jct_bill_categories <- tibble (
bill_number = educ_bill_numbers,
session_id = 1987,
bill_category = 'education'
)
jct_bill_categories <- jct_bill_categories %>%
left_join(t_bills %>% select(bill_id), by = "number, session_id")
jct_bill_categories <- jct_bill_categories %>%
left_join(t_bills %>% select(number, bill_id), by = "number, session_id")
View(jct_bill_categories)
View(jct_bill_categories)
jct_bill_categories <- tibble (
number = educ_bill_numbers,
session_id = 1987,
bill_category = 'education'
)
jct_bill_categories <- jct_bill_categories %>%
left_join(t_bills %>% select(number, bill_id), by = "number, session_id")
View(jct_bill_categories)
View(t_bills)
left_join(t_bills %>% select(number, bill_id), by = c("number, session_id")
jct_bill_categories <- jct_bill_categories %>%
jct_bill_categories <- jct_bill_categories %>%
left_join(t_bills %>% select(number, bill_id), by = c("number, session_id"))
jct_bill_categories <- jct_bill_categories %>%
left_join(t_bills %>% select(number, bill_id), by = c("number", "session_id"))
jct_bill_categories <- jct_bill_categories %>%
left_join(t_bills %>% select(number, bill_id), by = c("number"= "number", "session_id"="session_id"))
jct_bill_categories <- jct_bill_categories %>%
left_join(t_bills %>% select(number, session_id, bill_id), by = c("number"= "number", "session_id"="session_id"))
jct_bill_categories <- jct_bill_categories %>%
left_join(t_bills %>% select(number, session_id, bill_id), by = c("number", "session_id"))
View(jct_bill_categories)
educ_bill_numbers <- c('H0001','H0105','H0491','H0791','H0799','H1045','H1065','H7001','H7032','S0240','S0664','S2502')
jct_bill_categories <- tibble (
number = educ_bill_numbers,
session_id = 1987,
bill_category = 'education'
)
jct_bill_categories <- jct_bill_categories %>%
left_join(t_bills %>% select(number, session_id, bill_id), by = c("number", "session_id"))
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/0x_categorize_bills.R", echo=TRUE)
file.copy("05_load_views_and_app_layer.R","03z_load_processed.R")
file.copy("03_transform.R","04_prep_app.R")
########################################
#                                      #
# 1) connect to Postgres server        #
#                                      #
########################################
# Loop until successful connection
repeat {
con <- attempt_connection()
if (!is.null(con) && dbIsValid(con)) {
print("Successfully connected to the database!")
break
} else {
message("Failed to connect to the database. Please try again.")
}
}
source("functions_database.R") # functions to write to Postgres database
#ETL for raw layer
source("02_parse_legiscan.R")
rm(list=ls())
#ETL for raw layer
source("02_parse_legiscan.R")
source("02z_load_raw.R")
source("02z_load_raw.R")
source("functions_database.R") # functions to write to Postgres database
source("02z_load_raw.R")
source("02z_load_raw.R")
#ETL for processed layer
source("03a_categorize_bills.R")
#ETL for processed layer
source("03_transform.R")
source("03a_categorize_bills.R")
#ETL for app layer
source("04_prep_app.R") # merge, prep, analyze data
source("04z_load_app.R") # export dataframes to Postgres
########################################
#                                      #
# 1) connect to Postgres server        #
#                                      #
########################################
# Loop until successful connection
connect_db <- function() {
repeat {
con <- attempt_connection()
if (!is.null(con) && dbIsValid(con)) {
print("Successfully connected to the database!")
break
} else {
message("Failed to connect to the database. Please try again.")
}
}
}
source("04z_load_app.R") # export dataframes to Postgres
View(app_d_votes)
View(app_d_votes)
View(calc_d_votes)
View(calc_d_votes)
View(app_vote_patterns)
#################################
#                               #
# create app_vote_patterns      #
#                               #
#################################
app_vote_patterns <- app_data %>%
filter(pct_of_present != 0 & pct_of_present != 1) %>%
select(roll_call_id, legislator_name, partisan_metric, session_year, role, final_vote, party, bill_number, roll_call_desc, bill_title, roll_call_date, bill_desc, bill_url, pct_voted_for, vote_text, legislator_name) %>%
left_join(calc_d_votes, by = "roll_call_id") %>%
mutate(is_d_include = ifelse(is.na(roll_call_id.y), 0, 1)) %>%
select(-roll_call_id.y) %>%
rename(roll_call_id = roll_call_id.x)
#################################
#                               #
# create app_vote_patterns      #
#                               #
#################################
app_vote_patterns <- app_data %>%
filter(pct_of_present != 0 & pct_of_present != 1) %>%
select(roll_call_id, legislator_name, partisan_metric, session_year, role, final_vote, party, bill_number, roll_call_desc, bill_title, roll_call_date, bill_desc, bill_url, pct_voted_for, vote_text, legislator_name)
View(app_vote_patterns)
View(calc_d_votes)
app_vote_patterns <- app_vote_patterns %>%
left_join(calc_d_votes, by = "roll_call_id") %>%
mutate(is_d_include = ifelse(is.na(roll_call_id.y), 0, 1)) %>%
select(-roll_call_id.y) %>%
rename(roll_call_id = roll_call_id.x)
#################################
#                               #
# create app_vote_patterns      #
#                               #
#################################
app_vote_patterns <- app_data %>%
filter(pct_of_present != 0 & pct_of_present != 1) %>%
select(roll_call_id, legislator_name, partisan_metric, session_year, role, final_vote, party, bill_number, roll_call_desc, bill_title, roll_call_date, bill_desc, bill_url, pct_voted_for, vote_text, legislator_name)
app_vote_patterns <- app_vote_patterns %>%
left_join(calc_d_votes, by = "roll_call_id")
View(app_vote_patterns)
app_vote_patterns <- app_vote_patterns %>%
mutate(is_d_include = ifelse(roll_call_id %in% calc_d_votes$roll_call_id, 1, 0))
View(app_vote_patterns)
#################################
#                               #
# create app_vote_patterns      #
#                               #
#################################
app_vote_patterns <- app_data %>%
filter(pct_of_present != 0 & pct_of_present != 1) %>%
select(roll_call_id, legislator_name, partisan_metric, session_year, role, final_vote, party, bill_number, roll_call_desc, bill_title, roll_call_date, bill_desc, bill_url, pct_voted_for, vote_text, legislator_name)
app_vote_patterns <- app_vote_patterns %>%
mutate(is_include_d = ifelse(roll_call_id %in% calc_d_votes$roll_call_id, 1, 0))
View(app_vote_patterns)
View(app_vote_patterns)
#################################
#                               #
# create app_vote_patterns      #
#                               #
#################################
app_vote_patterns <- app_data %>%
filter(pct_of_present != 0 & pct_of_present != 1) %>%
select(roll_call_id, legislator_name, partisan_metric, session_year, role, final_vote, party, bill_number, roll_call_desc, bill_title, roll_call_date, bill_desc, bill_url, pct_voted_for, vote_text, legislator_name)
app_vote_patterns <- app_vote_patterns %>%
mutate(is_include_d = ifelse(roll_call_id %in% calc_d_votes$roll_call_id, 1, 0))
View(app_vote_patterns)
View(app_vote_patterns)
#################################
#                               #
# create app_vote_patterns      #
#                               #
#################################
app_vote_patterns <- app_data %>%
filter(pct_of_present != 0 & pct_of_present != 1) %>%
select(roll_call_id, legislator_name, partisan_metric, session_year, role, final_vote, party, bill_number, roll_call_desc, bill_title, roll_call_date, bill_desc, bill_url, pct_voted_for, vote_text, legislator_name)
app_vote_patterns <- app_vote_patterns %>%
mutate(
is_include_d = ifelse(roll_call_id %in% calc_d_votes$roll_call_id, 1, 0),
is_include_r = ifelse(roll_call_id %in% calc_r_votes$roll_call_id, 1, 0)
)
View(app_vote_patterns)
rm(app_d_votes)
rm(app_r_votes)
source("04z_load_app.R") # export dataframes to Postgres
source("04z_load_app.R") # export dataframes to Postgres
str(app_vote_patterns)
#############################################
#                                           #
# 2) export app data to CSV                 #
#                                           #
#############################################
# for those who don't want to deal with postgres
write.csv(app_vote_patterns, "app_vote_patterns.csv", row.names = FALSE)
#############################################
#                                           #
# 2) export app data to CSV                 #
#                                           #
#############################################
# for those who don't want to deal with postgres
write.csv(app_vote_patterns, "data-app/app_vote_patterns.csv", row.names = FALSE)
#############################################
#                                           #
# 2) export app data to CSV                 #
#                                           #
#############################################
# for those who don't want to deal with postgres
write.csv(app_vote_patterns, "./data-app/app_vote_patterns.csv", row.names = FALSE)
#############################################
#                                           #
# 2) export app data to CSV                 #
#                                           #
#############################################
# for those who don't want to deal with postgres
write.csv(app_vote_patterns, "data-app/app_vote_patterns.csv", row.names = FALSE)
#############################################
#                                           #
# 2) export app data to CSV                 #
#                                           #
#############################################
# for those who don't want to deal with postgres
write.csv(app_vote_patterns, "../data-app/app_vote_patterns.csv", row.names = FALSE)
View(calc_roll_call_to_number)
View(app_vote_patterns)
View(calc_legislator_mean_partisanship)
View(calc_legislator_mean_partisanship)
#################################
#                               #
# create app_vote_patterns      #
#                               #
#################################
app_vote_patterns <- app_data %>%
filter(pct_of_present != 0 & pct_of_present != 1) %>%
select(roll_call_id, legislator_name, partisan_metric, session_year, role, final_vote, party, bill_number, roll_call_desc, bill_title, roll_call_date, bill_desc, bill_url, pct_voted_for, vote_text, legislator_name)
View(calc_legislator_mean_partisanship)
# creates an overall partisanship metric for each legislator, filters for dates >= 11/10/12?
# this is used later to sort the dataframe
calc_legislator_mean_partisanship <- p_partisanship %>%
group_by(legislator_name) %>%
filter(roll_call_date >= as.Date("11/10/2012")) %>%
summarize(mean_partisan_metric=mean(partisan_metric)) %>%
arrange(mean_partisan_metric,legislator_name) #create the sort based on partisan metric
###########################################
#                                         #
# 3) STOPGAP HARDCODING                   #
#                                         #
###########################################
#6/28/24 this works fine, but should debug and find the problem upstream
p_partisanship$bill_number = p_partisanship$bill_number.x
p_partisanship$bill_title = p_partisanship$bill_title.x
p_partisanship <- p_partisanship %>%
select(-bill_title.x,-bill_title.y,-bill_number.x,-bill_number.y)
View(calc_legislator_mean_partisanship)
View(calc_legislator_mean_partisanship)
# workaround 6/27/24 replaced session_name with session, twice in the first filter below
p_partisanship <- calc_votes_partisanship %>%
left_join(calc_party_majority_votes, by = c("roll_call_id")) %>%
filter(!is.na(party)&party!="" & !grepl("2010",session,ignore.case=TRUE)& !is.na(session)) %>%
filter(vote_text=="Yea"|vote_text=="Nay") %>%
mutate(diff_party_vote_d = if_else(vote_text != vote_D, 1, 0),diff_party_vote_r = if_else(vote_text != vote_R, 1, 0),
diff_both_parties = if_else(diff_party_vote_d == 1 & diff_party_vote_r == 1,1,0),
diff_d_not_r=if_else(diff_party_vote_d==1 & diff_party_vote_r==0,1,0),
diff_r_not_d=if_else(diff_party_vote_d==0&diff_party_vote_r==1,1,0),
partisan_metric = ifelse(party=="R",diff_r_not_d,ifelse(party=="D",diff_d_not_r,NA)),
pct_voted_for = scales::percent(pct_of_total)) %>% arrange(desc(partisan_metric)) %>% distinct()
# re-order data for better visualization
p_partisanship$roll_call_id = with(p_partisanship, reorder(roll_call_id, partisan_metric, sum))
p_partisanship$legislator_name = with(p_partisanship, reorder(legislator_name, partisan_metric, sum))
# creates an overall partisanship metric for each legislator, filters for dates >= 11/10/12?
# this is used later to sort the dataframe
calc_legislator_mean_partisanship <- p_partisanship %>%
group_by(legislator_name) %>%
filter(roll_call_date >= as.Date("11/10/2012")) %>%
summarize(mean_partisan_metric=mean(partisan_metric)) %>%
arrange(mean_partisan_metric,legislator_name) #create the sort based on partisan metric
View(calc_legislator_mean_partisanship)
View(calc_legislator_mean_partisanship)
View(app_vote_patterns)
#################################
#                               #
# create app_vote_patterns      #
#                               #
#################################
app_vote_patterns <- app_data %>%
filter(pct_of_present != 0 & pct_of_present != 1) %>%
select(roll_call_id, legislator_name, partisan_metric, session_year, role, final_vote, party, bill_number, roll_call_desc, bill_title, roll_call_date, bill_desc, bill_url, pct_voted_for, vote_text, legislator_name)
app_vote_patterns <- app_vote_patterns %>%
left_join(calc_legislator_mean_partisanship %>% select(legislator_name, mean_partisan_metric), by = "legislator_name")
View(app_vote_patterns)
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/04z_load_app.R", echo=TRUE)
View(app_vote_patterns)
app_vote_patterns <- app_vote_patterns %>%
left_join(calc_legislator_mean_partisanship %>% select(legislator_name, mean_partisan_metric), by = "legislator_name")
#################################
#                               #
# create app_vote_patterns      #
#                               #
#################################
app_vote_patterns <- app_data %>%
filter(pct_of_present != 0 & pct_of_present != 1) %>%
select(roll_call_id, legislator_name, partisan_metric, session_year, role, final_vote, party, bill_number, roll_call_desc, bill_title, roll_call_date, bill_desc, bill_url, pct_voted_for, vote_text, legislator_name)
app_vote_patterns <- app_vote_patterns %>%
left_join(calc_legislator_mean_partisanship %>%
select(legislator_name, mean_partisan_metric), by = "legislator_name") %>%
mutate(
is_include_d = ifelse(roll_call_id %in% calc_d_votes$roll_call_id, 1, 0),
is_include_r = ifelse(roll_call_id %in% calc_r_votes$roll_call_id, 1, 0)
)
source("C:/Users/relia/jour/jaxtrib/fl-leg-etl/scripts/etl_main.R", echo=TRUE)
source("03z_load_processed.R")
#ETL for app layer
source("04_prep_app.R") # merge, prep, analyze data
source("04z_load_app.R") # export dataframes to Postgres
View(app_vote_patterns)
